---
- hosts: pfservers
  name: configure Golang environment for unit tests
  become: True
#  collections:
#  - inverse_inc.packetfence

#  roles:
#    - role: packetfence_go
#      tags: go
  tasks:
  - name: Creating radius config
    copy:
      dest: "/usr/local/pf/raddb/test.conf"
      content: |
        # Copyright (C) Inverse inc.
        pidfile = /usr/local/pf/var/run/radiusd.pid
        $INCLUDE radiusd.conf
        listen {
            ipaddr = 127.0.0.1
            port = 1820
            type = auth
            virtual_server = default
        }
        listen {
            type = control
            socket = /usr/local/pf/var/run/radiusd-default.sock
            mode = rw
        }
        log {
            destination = syslog
            colourise = yes
            file = ${logdir}/radius-default.log
            syslog_facility = local1
            stripped_names = no
            auth = yes
            auth_badpass = no
            auth_goodpass = no
            msg_denied = "You are already logged in - access denied"
        }

  - name: Creating a file for password simple auth
    copy:
      dest: "{{ cli_login_radius.pod }}"
      content: |
        User-Name = "bob"
        User-Password = "hello"
        NAS-IP-Address = "192.168.0.1"

  - name: Creating a file for password via proxy
    copy:
      dest: "{{ cli_login_radius.pod_proxy }}"
      content: |
        User-Name = '{{ cli_login_radius.realm.id }}\bob'
        User-Password = "hello"
        NAS-IP-Address = "192.168.0.1" 

  - name: Authorization in radb
    blockinfile:
      path: /usr/local/pf/raddb/mods-config/files/authorize
      block: |
        bob     Cleartext-Password := "hello"
                Reply-Message := "Hello, %{User-Name}"

  - name: Creating radius server enabled config
    copy:
      dest: "/usr/local/pf/raddb/sites-enabled/default"
      content: |
        server default {
        authorize {
                filter_username
                preprocess
                chap
                mschap
                digest
                suffix
                eap {
                        ok = return
                }
                files
                -sql
                -ldap
                expiration
                logintime
                pap
        }
        authenticate {
                Auth-Type PAP {
                        pap
                }
                Auth-Type CHAP {
                        chap
                }
                Auth-Type MS-CHAP {
                        mschap
                }
                digest
                eap
        }
        preacct {
                preprocess
                acct_unique
                suffix
                files
        }
        accounting {
                detail
                unix
                -sql
                exec
                attr_filter.accounting_response
        }
        session {
        }
        post-auth {
                update {
                        &reply: += &session-state:
                }
                -sql
                exec
                remove_reply_message_if_eap
                Post-Auth-Type REJECT {
                        -sql
                        attr_filter.access_reject
                        eap
                        remove_reply_message_if_eap
                }
        }
        pre-proxy {
        }
        post-proxy {
                eap
        }
        }

  - name: Creating radius service
    copy:
      dest: "/lib/systemd/system/radius-test.service"
      content: |
        # Copyright (C) Inverse inc.
        [Unit]
        Description=PacketFence FreeRADIUS authentication multi-protocol authentication server
        Documentation=man:radiusd(8) man:radiusd.conf(5) http://wiki.freeradius.org/ http://networkradius.com/doc/
        
        [Service]
        Type=notify
        WatchdogSec=10
        StartLimitBurst=3
        StartLimitInterval=10
        ExecStart=/usr/sbin/freeradius -d /usr/local/pf/raddb  -n test -fm
        Restart=on-failure
      when: ansible_facts['os_family'] == "Debian"

  - name: Creating radius service
    copy:
      dest: "/lib/systemd/system/radius-test.service"
      content: |
        # Copyright (C) Inverse inc.
        [Unit]
        Description=PacketFence FreeRADIUS authentication multi-protocol authentication server
        Documentation=man:radiusd(8) man:radiusd.conf(5) http://wiki.freeradius.org/ http://networkradius.com/doc/

        [Service]
        Type=notify
        WatchdogSec=10
        StartLimitBurst=3
        StartLimitInterval=10
        ExecStart=/usr/sbin/radiusd -d /usr/local/pf/raddb  -n test -fm
        Restart=on-failure
      when: ansible_facts['os_family'] == "RedHat"

  - name: Restart service
    ansible.builtin.systemd:
      state: restarted
      daemon_reload: yes
      name: radius-test 
