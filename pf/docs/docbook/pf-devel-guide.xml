<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
[
  <!ENTITY additional-info SYSTEM "additional-info.xml">
  <!ENTITY commercial-support SYSTEM "commercial-support.xml">
  <!ENTITY license SYSTEM "license.xml">
]>
<!-- ********************************************************************

     PacketFence Developers Guide

     This file is part of the PacketFence project.
     See book.info for authors, copyright and license information.

     ******************************************************************** -->
<book id="developers-guide" lang="en">
<info>
  <title>PacketFence Developer's Guide</title>
  <subtitle>for version 3.1.0</subtitle>
  <date>2011-12-23</date>
  <revhistory>
    <revision>
      <revnumber>2.8</revnumber>
      <date>2011-12-15</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Coverage of our support for RADIUS Dynamic Authorization (RFC3576). Updated exception-handling
      section. Added transifex translation instructions.</revremark>
    </revision>
    <revision>
      <revnumber>2.7</revnumber>
      <date>2011-10-31</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Explained new translation technique for violation remediation pages.</revremark>
    </revision>
    <revision>
      <revnumber>2.6</revnumber>
      <date>2011-10-19</date>
      <authorinitials>OBU</authorinitials>
      <revremark>New documentation section points to POD doc. New Authentication modules section. Minor references
      that were out of date.</revremark>
    </revision>
    <revision>
      <revnumber>2.5</revnumber>
      <date>2011-09-21</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Content updated to reflect latest captive portal improvements: Better templating, XHTML/CSS and
      streamlined remediation pages. Updated translation information including contributing translations. How-to
      develop support for Floating Network Devices in switches and documented controllerIp feature.</revremark>
    </revision>
    <revision>
      <revnumber>2.4</revnumber>
      <date>2011-03-31</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Updated wireless hardware support instructions and checklist. Added clarifications to the MAC Auth
      and 802.1X support development.</revremark>
    </revision>
    <revision>
      <revnumber>2.3</revnumber>
      <date>2011-02-10</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Template improvements</revremark>
    </revision>
    <revision>
      <revnumber>2.2</revnumber>
      <date>2011-02-02</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Reworked new switch support into a more general new network devices support. New content: Wireless
      Access-Points and Controllers, Switch support for MAC Auth and 802.1X, a new "add a network device to
      PacketFence" checklist and new exception handling techniques.</revremark>
    </revision>
    <revision>
      <revnumber>2.1</revnumber>
      <date>2011-02-01</date>
      <authorinitials>OBU</authorinitials>
      <revremark>New content: a chapter on contributing, one on code conventions and one on developer recipes (run
      devel env., debug grammar).</revremark>
    </revision>
    <revision>
      <revnumber>2.0</revnumber>
      <date>2011-01-31</date>
      <authorinitials>OBU</authorinitials>
      <revremark>Port to Docbook.</revremark>
    </revision>
    <revision>
      <revnumber>1.0</revnumber>
      <date>2008-12-13</date>
      <authorinitials>DGL</authorinitials>
      <revremark>First OpenDocument version.</revremark>
    </revision>
  </revhistory>
  <author>
    <firstname>Olivier</firstname>
    <surname>Bilodeau</surname>
    <affiliation>
      <address>
        <email>obilodeau@inverse.ca</email>
      </address>
    </affiliation>
  </author>
  <author>
    <firstname>Dominik</firstname>
    <surname>Gehl</surname>
    <affiliation>
      <address>
        <email>dgehl@inverse.ca</email>
      </address>
    </affiliation>
  </author>
  <copyright>
    <year>2008</year>
    <year>2009</year>
    <year>2010</year>
    <year>2011</year>
    <holder>Inverse inc.</holder>
  </copyright>
  <legalnotice>
    <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free
    Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no
    Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the
    section entitled "GNU Free Documentation License".</para>
  </legalnotice>
  <releaseinfo>Version 3.1.0 - December 2011</releaseinfo>
  <mediaobject>
    <objectinfo>
      <corpname>Inverse inc.</corpname>
    </objectinfo>
    <textobject>
      <phrase>PacketFence's spike logo</phrase>
    </textobject>
    <imageobject>
      <imagedata align="left" width="4in" format="PNG" fileref="docs/images/pf-logo.png" />
    </imageobject>
  </mediaobject>
</info>
<chapter>
  <title>About this Guide</title>
  <para>This guide will help you modifying PacketFence to your particular needs. It also contains information on
  how to add support for new switches.</para>
  <para>The instructions are based on version 3.1.0 of PacketFence.</para>
  <para>The latest version of this guide is available online at</para>
  <para>
  <ulink url="http://www.packetfence.org/download/guides.html">
  http://www.packetfence.org/download/guides.html</ulink>.</para>
</chapter>
<chapter>
  <title>Documentation</title>
  <para>The in-depth or more technical documentation is always as close to the code as possible. Always look at the
  POD doc 
  <footnote>
    <para>Perl's Plain Old Documentation: 
    <ulink url="http://perldoc.perl.org/perlpod.html">http://perldoc.perl.org/perlpod.html</ulink></para>
  </footnote>. To do so, the prefered way is using the 
  <command>perldoc</command>command as follows: 
  <screen>perldoc conf/authentication/ldap.pm</screen></para>
</chapter>
<chapter>
  <title>Code conventions</title>
  <sect1>
    <title>Code style</title>
    <!-- TODO I would like to add code samples of current style vs old style -->
    <caution>This is work in progress.</caution>
    <para>We are slowly migrating away from an automated perltidy code style. The reason we are not doing another
    pass of tidy is that it messes up code history and makes maintainer's job more complicated than it should be.
    Every new change uses the new guidelines so over time the old code style will slowly disappear.</para>
    <itemizedlist>
      <listitem>
        <para>Lines of 120 character width manually wrap longer lines</para>
      </listitem>
      <listitem>
        <para>No tab characters</para>
      </listitem>
      <listitem>
        <para>Use constants instead of hardcoded strings or numbers (use 
        <classname>constant</classname>or 
        <classname>Readonly</classname>modules)</para>
      </listitem>
      <listitem>
        <para>in object-oriented modules we use CamelCase notation (ex: 
        <varname>$radiusRequest-&gt;getVoIpAttributes();)</varname></para>
      </listitem>
      <listitem>
        <para>in procedural modules we use perl usual notation (ex: 
        <varname>$node_info{'pid'} = $current_request{'pid'};)</varname></para>
      </listitem>
      <listitem>
        <para>regular expressions should be documented (with the 
        <parameter>/x</parameter>modifier)</para>
        <programlisting>
          <![CDATA[if ($phone_number =~ /
    ^\(?([2-9]\d{2})\)?  # captures first 3 digits allows parens
    (?:-|.|\s)?          # separator -, ., space or nothing
    (\d{3})              # captures 3 digits
    (?:-|.|\s)?          # separator -, ., space or nothing
    (\d{4})$             # captures last 4 digits
    /x) {
        return "$1$2$3";
}
]]>
</programlisting>
      </listitem>
      <listitem>
        <para>SQL should be capitalized, properly indented and always use named fields (no *)</para>
        <programlisting>
          <![CDATA[$node_statements->{'node_add_sql'} = get_db_handle()->prepare(qq[
    INSERT INTO node (
        mac, pid, category_id, status, voip, bypass_vlan,
        detect_date, regdate, unregdate, lastskip,
        user_agent, computername, dhcp_fingerprint,
        last_arp, last_dhcp,
        notes,
    ) VALUES (
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
    )
]);
]]>
</programlisting>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>
<chapter>
  <title>Customizing PacketFence</title>
  <sect1>
    <title>Captive Portal</title>
    <sect2 id="presentation">
      <title id="presentation.title">Presentation</title>
      <sect3>
        <title>XHTML Templates</title>
        <para>Captive portal content use Template Toolkit templates ( 
        <ulink url="http://template-toolkit.org/">http://template-toolkit.org/</ulink>). All the template files are
        located in 
        <filename>/usr/local/pf/html/captive-portal/templates</filename>. You can freely edit the HTML code in this
        file (and all other template files). However, if you want to customize the pages beyond the HTML template
        (for example by adding new variables to it), you'll need to look into the 
        <filename>/usr/local/pf/lib/pf/web/custom.pm</filename>Perl module. This module allows you to overload the
        behavior of the default 
        <filename>/usr/local/pf/lib/pf/web.pm</filename>module.</para>
        <para>Each template relies on 
        <filename>header.html</filename>and 
        <filename>footer.html</filename>for the common top and bottom portion of each file.</para>
      </sect3>
      <sect3>
        <title>CSS</title>
        <para>Most of the branding should be possible by only changing the CSS. It is located in 
        <filename>/usr/local/pf/html/captive-portal/content/styles.css</filename>and there is also one loaded by
        mobile browsers at 
        <filename>/usr/local/pf/html/captive-portal/content/mobile.css</filename>.</para>
      </sect3>
    </sect2>
    <sect2>
      <title>Workflow</title>
      <para>When a HTTP request is received by the Apache web server, the following workflow happens:</para>
      <orderedlist>
        <listitem>
          <para>URL is compared against the redirection instructions in 
          <filename>/usr/local/pf/conf/httpd.conf.d/captive-portal-cleanurls.conf</filename></para>
        </listitem>
        <listitem>
          <para>Requested CGI script in 
          <filename>/usr/local/pf/html/captive-portal/</filename>is executed</para>
        </listitem>
        <listitem>
          <para>CGI script calls a 
          <function>generate_&lt;type&gt;</function>function which is defined in 
          <filename>/usr/local/pf/lib/pf/web.pm</filename></para>
        </listitem>
        <listitem>
          <para>The 
          <function>generate_&lt;type&gt;</function>function populate the proper template in 
          <filename>/usr/local/pf/html/captive-portal/templates</filename>in order to render the page</para>
        </listitem>
      </orderedlist>
    </sect2>
    <sect2>
      <title>Authentication modules</title>
      <para>Default authentication modules are provided in 
      <filename>conf/authentication/</filename>. These modules are meant to be modified by users. A version check
      in made in 
      <command>pfcmd checkup</command>to verify API compatibility of modified modules. Since the 3.0 releases these
      modules are objects and they have a couple of useful methods to override. Check the 
      <classname>pf::web::auth</classname>POD documentation for the details and the list of all object methods.
      Below is the list of, arguably, the most interesting: 
      <itemizedlist>
        <listitem>
          <function>getNodeAttributes</function>
        </listitem>
        <listitem>
          <function>authenticate</function>
        </listitem>
      </itemizedlist>Here's an example of a 
      <function>getNodeAttributes</function>that will automatically categorize nodes of a given authentication type
      and set an 
      <varname>unregdate</varname>to tomorrow at midnight: 
      <programlisting language="perl">
        <![CDATA[sub getNodeAttributes {
    my ($this) = @_;

    return (
        unregdate => POSIX::strftime( "%Y-%m-%d 00:00:00", localtime(time + 24*60*60) ),
        category => 'consultants', 
    );
}
]]>
</programlisting></para>
    </sect2>
    <sect2>
      <title>Remediation Pages</title>
      <para>The remediation page shown to the user during isolation are specified through the URL parameter of the
      given violation in 
      <filename>/usr/local/pf/conf/violations.conf</filename>. In its default configuration, PacketFence uses PHP
      to render text provided in the directory 
      <filename>/usr/local/pf/html/captive-portal/violations/</filename>and obeys the everything mentionned in the 
      <link linkend='presentation' endterm="presentation.title" />section. The only caveat being that the template
      ( 
      <filename>remediation.html</filename>) is not Template Toolkit but pure PHP.</para>
    </sect2>
    <sect2>
      <title>Translations</title>
      <para>The language of the user registration pages is selected through the 
      <varname>general.locale</varname>configuration parameter. Translatable strings are handled differently for
      the Remediation pages and the rest of the captive portal: 
      <itemizedlist>
        <listitem>
          <para>Remediation pages</para>
          <para>Strings defined in the violation pages (in 
          <filename>/usr/local/pf/html/captive-portal/violations/</filename>) will be looked up in the translation
          files in 
          <filename>/usr/local/pf/conf/locale/..</filename>and if a translation is available the translated string
          will be the one visible on the captive portal.</para>
          <para>Also, if you create a violation template with the name of your locale in 
          <filename>/usr/local/pf/html/captive-portal/violations/</filename>in the format: 
          <filename>&lt;template_name&gt;.&lt;locale_name&gt;.php</filename>. It will be loaded instead of the
          default 
          <filename>&lt;template_name&gt;.php</filename>and so you can put strings and HTML directly in your target
          language without the hassle of escaping everything properly as you would need to do with gettext.</para>
          <para>For example, if 
          <filename>malware.es_ES.php</filename>exists and you are using the 
          <varname>es_ES</varname>(Spanish) locale then it will be loaded instead of 
          <filename>malware.php</filename>on violation set to load the 
          <varname>malware</varname>template.</para>
        </listitem>
        <listitem>
          <para>Rest of the captive portal</para>
          <para>In the templates, if a string is in a 
          <function>i18n()</function>call it will be translated. Also 
          <classname>pf::web</classname>takes care of performing some of the other translations.</para>
        </listitem>
      </itemizedlist></para>
    </sect2>
  </sect1>
  <sect1>
    <title>Adding custom fields to the database</title>
    <para>You can, if needed, add additional fields to the PacketFence database. Keep in mind though that this
    might lead to more work when you upgrade to the next PacketFence version. Depending on the degree of
    integration of these fields with PacketFence, you'll have to execute one or more of the following steps</para>
    <sect2>
      <title>Adding a field to the database only</title>
      <para>In this case, the field is part of one of the main PacketFence tables, but PacketFence is unaware of
      it. PacketFence won't consult the field and won't be able to modify it. A possible usage scenario would be a
      3rd party application which maintains this field.</para>
      <para>Since PacketFence doesn't have to know about the field, all you have to do is execute your SQL ALTER
      TABLE query and you are done.</para>
    </sect2>
    <sect2>
      <title>Adding a field and giving PacketFence read-only access</title>
      <para>In this case, PacketFence can show the contents of the table using both 
      <command>pfcmd</command>and the Web Admin GUI, but won't be able to modify the contents of the field.</para>
      <para>Start by modifying the database table using an SQL ALTER TABLE query.</para>
      <para>Then, modify the Perl module having the same name as the table you have added the field to, i.e. If you
      added the field to the node table, then edit 
      <filename>/usr/local/pf/lib/pf/node.pm</filename>. You'll have to modify the SQL SELECT queries at the
      beginning of the file to include your new field and, possibly the functions using these queries. If your new
      field should be used in reports, the dashboard or graphs, you'll also have to modify the queries in 
      <filename>/usr/local/pf/lib/pf/pfcmd/graph.pm</filename>, 
      <filename>/usr/local/pf/lib/pf/pfcmd/report.pm</filename>and 
      <filename>/usr/local/pf/lib/pf/pfcmd/dashboard.pm</filename>.</para>
      <para>Last, but not least, you'll have to modify the file 
      <filename>/usr/local/pf/conf/ui.conf</filename>. In this file, you can also give a nice looking name to your
      field for showing up in the Web Admin GUI.</para>
    </sect2>
    <sect2>
      <title>Adding a field and giving PacketFence read-write access</title>
      <para>Start by creating the read-only field as described above.</para>
      <para>Then, modify the SQL UPDATE and INSERT queries in the database tables Perl module, as well as the
      associated functions.</para>
      <para>The last step is to make PacketFence's grammar aware of the new field. Modify 
      <filename>/usr/local/pf/lib/pf/pfcmd/pfcmd.pm</filename>and then re-generate the precompiled grammar (which
      is used by the pfcmd CLI) with:</para>
      <!-- TODO auto-wrapping at the XSL layer -->
      <screen>
        <![CDATA[cd /usr/local/pf

/usr/bin/perl -w -e '
    use strict; use warnings; use diagnostics; 
    use Parse::RecDescent; use lib "/usr/local/pf/lib"; 
    use pf::pfcmd::pfcmd;
    Parse::RecDescent->Precompile($grammar, "pfcmd_pregrammar");
'

mv pfcmd_pregrammar.pm /usr/local/pf/lib/pf/pfcmd/pfcmd_pregrammar.pm
]]>
</screen>
    </sect2>
  </sect1>
  <sect1>
    <title>VLAN assignment</title>
    <caution>This information in the following section is obsolete.</caution>
    <para>The pfsetvlan daemon assigns by default a MAC to the VLAN which is saved in the VLAN field in its
    database entry. This VLAN field is, again by default, filled during registration with the normalVlan
    configuration setting, defined in 
    <filename>/usr/local/pf/conf/switches.conf</filename>.</para>
    <para>So, there are two different ways to change the VLAN a given node ends up in: by modifying the content
    which is saved in the VLAN field during registration and by modifying how pfsetvlan uses this
    information.</para>
    <para>Modifying the VLAN assignment during registration</para>
    <para>You can change the default behavior by modifying the following lines in 
    <filename>/usr/local/pf/cgi-bin/register.cgi</filename></para>
    <screen>
      <![CDATA[#determine default VLAN if VLAN isolation is enabled 
#and the vlan has not been set yet 
if (isenabled($Config{'network'}{'vlan'})) { 
    if (! defined($info{'vlan'})) { 
        my %ConfigVlan; 
        tie %ConfigVlan, 'Config::IniFiles', 
            (-file = '/usr/local/pf/conf/switches.conf'); 
        $info{'vlan'} = $ConfigVlan{'default'}{'normalVlan'}; 
    } 
}
]]>
</screen>
    <sect2>
      <title>Modifying how pfsetvlan calculates the VLAN for a node</title>
      <para>pfsetvlan uses the 
      <function>getNormalVlan</function>function defined in 
      <classname>pf::vlan::custom</classname>to determine a node's VLAN. Here's the default function:</para>
      <programlisting language="perl">
        <![CDATA[sub getNormalVlan {
    #$switch is the switch object (pf::SNMP)
    #$ifIndex is the ifIndex of the computer connected to
    #$mac is the mac connected
    #$node_info is the node info hashref (result of pf::node's node_view on $mac)
    #$conn_type is set to the connnection type expressed as the constant in pf::config 
    #$user_name is set to the RADIUS User-Name attribute (802.1X Username or MAC address under MAC Authentication)
    #$ssid is the name of the SSID (Be careful: will be empty string if radius non-wireless and undef if not radius)

    my ($this, $switch, $ifIndex, $mac, $node_info, 
        $connection_type, $user_name, $ssid) = @_;

    my $logger = Log::Log4perl->get_logger();

    return $switch->getVlanByName('normalVlan');
}
]]>
</programlisting>
      <para>As you can see, the function receives several parameters (such as the switch and full node details)
      which allow you to return the VLAN in a way that matches exactly your needs!</para>
    </sect2>
  </sect1>
</chapter>
<chapter>
  <title>SNMP</title>
  <sect1>
    <title>Introduction</title>
    <para>Good places to start reading about SNMP are 
    <ulink url="http://en.wikipedia.org/wiki/SNMP">http://en.wikipedia.org/wiki/SNMP</ulink>and 
    <ulink url="http://www.net-snmp.org/">http://www.net-snmp.org/</ulink>.</para>
    <para>When working with SNMP, you'll sooner or later (in fact more sooner than later) be confronted with having
    to translate between OIDs and variable names. When the OIDs are part of the Cisco MIBs, you can use the
    following tool to do the translation: 
    <ulink url="http://tools.cisco.com/Support/SNMP/public.jsp">
    http://tools.cisco.com/Support/SNMP/public.jsp</ulink>. Otherwise, you'll have to use snmptranslate for example
    and setup your own collection of MIBs, provided (hopefully) by the manufacturer of your network
    equipment.</para>
  </sect1>
  <sect1>
    <title>Obtaining switch and port information</title>
    <para>Below are some example of how to obtain simple switch and port information using SNMP. We'll assume that
    your switch understands SNMP v2, has the read community public defined and is reachable at 192.168.1.10.</para>
    <sect2>
      <title>Switch Type</title>
      <screen>snmpwalk -v 2c -c public 192.168.1.10 sysDescr</screen>
    </sect2>
    <sect2>
      <title>Switchport indexes and descriptions</title>
      <screen>snmpwalk -v 2c -c public 192.168.1.10 ifDescr</screen>
    </sect2>
    <sect2>
      <title>Switchport types</title>
      <screen>snmpwalk -v 2c -c public 192.168.1.10 ifType</screen>
    </sect2>
    <sect2>
      <title>Switchport status</title>
      <screen>
        <![CDATA[snmpwalk -v 2c -c public 192.168.1.10 ifAdminStatus
snmpwalk -v 2c -c public 192.168.1.10 ifOperStatus
]]>
</screen>
    </sect2>
  </sect1>
  <sect1>
    <title>Obtaining VLAN information on Cisco switches</title>
    <sect2>
      <title>Access VLAN on a switchport</title>
      <screen>
        <![CDATA[snmpwalk -c public -m CISCO-VLAN-MEMBERSHIP-MIB -M \
/usr/local/share/snmp/mibs:/usr/share/snmp/mibs \
-v 2c 192.168.1.10 vmVlan
]]>
</screen>
    </sect2>
  </sect1>
</chapter>
<chapter>
  <title>Supporting new network hardware</title>
  <para>PacketFence is designed to ease the addition of support for new network hardware referred to as Network
  Devices. All supported network devices are represented through Perl objects with an extensive use of inheritance.
  Adding support for a new product comes down to extending the 
  <classname>pf::SNMP</classname>class (in 
  <filename>/usr/local/pf/lib/pf</filename>).</para>
  <para>The starting point to adding support for a new network device should be the vendor's documentation! First
  of all, you'll have to figure out the exact capabilities of the switch and how these capabilities will fit into
  PacketFence. Is it a Switch, an Access-Point or a Wireless Controller?</para>
  <sect1>
    <title>Switch</title>
    <para>Will you be able to use only link change traps? Does your switch allow you to use MAC notification traps?
    Port Security? MAC Authentication? 802.1X?</para>
    <sect2>
      <title>Link change capabilities</title>
      <para>You need to define a new class which inherits from 
      <classname>pf::SNMP</classname>and defines at least the following functions:</para>
      <itemizedlist>
        <listitem>
          <function>getMacAddrVlan</function>
        </listitem>
        <listitem>
          <function>getVersion</function>
        </listitem>
        <listitem>
          <function>getVlan</function>
        </listitem>
        <listitem>
          <function>getVlans</function>
        </listitem>
        <listitem>
          <function>isDefinedVlan</function>
        </listitem>
        <listitem>
          <function>parseTrap</function>
        </listitem>
        <listitem>
          <function>_getMacAtIfIndex</function>
        </listitem>
        <listitem>
          <function>_setVlan</function>
        </listitem>
      </itemizedlist>
      <para>The 
      <function>parseTrap</function>function will need to return a hash with keys 
      <varname>trapType</varname>and 
      <varname>trapIfIndex</varname>. The associated values must be 
      <varname>up</varname>or 
      <varname>down</varname>for 
      <varname>trapType</varname>and the traps 
      <varname>ifIndex</varname>for 
      <varname>trapIfIndex</varname>.</para>
    </sect2>
    <sect2>
      <title>MAC notification capabilities</title>
      <para>In addition to the functions mentioned for link change, you need to define the following
      function:</para>
      <itemizedlist>
        <listitem>
          <function>isLearntTrapsEnabled</function>
        </listitem>
      </itemizedlist>
      <para>Also, your 
      <function>parseTrap</function>function will need to be able to return a third value for the 
      <varname>trapType</varname>key: 
      <varname>mac</varname>. In this case, the hash also needs to contain 
      <varname>trapOperation</varname>, 
      <varname>trapVlan</varname>and 
      <varname>trapMac</varname>keys.</para>
    </sect2>
    <sect2>
      <title>Port security capabilities</title>
      <para>In addition to the functions mentioned for link change, you need to define the following
      functions:</para>
      <itemizedlist>
        <listitem>
          <function>isPortSecurityEnabled</function>
        </listitem>
        <listitem>
          <function>authorizeMAC</function>
        </listitem>
      </itemizedlist>
      <para>In this case, the 
      <function>parseTrap</function>function needs to be able to return 
      <function>secureMacAddrViolation</function>for the 
      <function>trapType</function>key.</para>
    </sect2>
    <sect2>
      <title>MAC Authentication</title>
      <note>Work in progress</note>
      <sect3>
        <title>NAS-Port translation</title>
        <para>Often the 
        <varname>ifIndex</varname>provided by the switch in a 
        <systemitem>RADIUS</systemitem>
        <systemitem>Access-Request</systemitem>is not the same as it's real world physical equivalent. For example
        in Cisco requests are in the 50xxx while physical ports are 10xxx. In order for PacketFence to properly
        shut the port or request re-authentication a translation between the two is required. To do so provide an
        implementation of the following interface: 
        <itemizedlist>
          <listitem>
            <function>NasPortToIfIndex</function>
          </listitem>
        </itemizedlist></para>
      </sect3>
      <sect3>
        <title>MAC Authentication re-evaluation</title>
        <para>MAC Authentication re-evaluation is necessary in order to provoke a VLAN change in the PacketFence
        system. This happens for instance when a node is isolated based on an IDS event or when the user
        succesfully authenticates through the captive portal. The default implementation in 
        <classname>pf::SNMP</classname>will bounce the port if there is no Voice over IP devices connected to the
        port. Otherwise it will do nothing and send an email. If your device has specific needs (for example it
        doesn't support RADIUS Dynamic VLAN Assignments) override: 
        <itemizedlist>
          <listitem>
            <function>handleReAssignVlanTrapForWiredMacAuth</function>
          </listitem>
        </itemizedlist></para>
      </sect3>
      <para>Once the 
      <systemitem>MAC Authentication</systemitem>works, add the 
      <systemitem>Wired MAC Auth</systemitem>capability to the switch's code with: 
      <programlisting language="perl">sub supportsWiredMacAuth { return $TRUE; }</programlisting></para>
    </sect2>
    <sect2>
      <title>802.1X</title>
      <note>Work in progress</note>
      <sect3>
        <title>NAS-Port translation</title>
        <para>Often the 
        <varname>ifIndex</varname>provided by the switch in a 
        <systemitem>RADIUS</systemitem>
        <systemitem>Access-Request</systemitem>is not the same as it's real world physical equivalent. For example
        in Cisco requests are in the 50xxx while physical ports are 10xxx. In order for PacketFence to properly
        shut the port or request re-authentication a translation between the two is required. To do so provide an
        implementation of the following interface: 
        <itemizedlist>
          <listitem>
            <function>NasPortToIfIndex</function>
          </listitem>
        </itemizedlist>So far the implementation has been the same for MAC Authentication and 802.1X.</para>
      </sect3>
      <sect3>
        <title>Force 802.1X re-authentication</title>
        <para>802.1X re-authentication is necessary in order to provoke a VLAN change in the PacketFence system.
        This happens for instance when a node is isolated based on an IDS event or when the user succesfully
        authenticates through the captive portal. The default implementation in 
        <classname>pf::SNMP</classname>uses the 
        <systemitem>IEEE8021-PAE-MIB</systemitem>and is generally well supported. If the default implementation to
        force 802.1X re-authentication doesn't work override: 
        <itemizedlist>
          <listitem>
            <function>dot1xPortReauthenticate</function>
          </listitem>
        </itemizedlist></para>
        <para>Proper 802.1X implementations will perform re-authentication while still allowing traffic to go
        through for supplicants under re-evaluation.</para>
      </sect3>
      <para>Once the 
      <systemitem>802.1X</systemitem>works, add the 
      <systemitem>Wired Dot1X</systemitem>capability to the switch's code with: 
      <programlisting language="perl">sub supportsWiredDot1x { return $TRUE; }</programlisting></para>
    </sect2>
    <sect2>
      <title>RADIUS Dynamic Authorization (RFC3576)</title>
      <note>RADIUS Dynamic Authorization implementation is not recommended on the wired side at this point.</note>
      <para>RADIUS Dynamic Authorization also known as RADIUS Change of Authorization (CoA) or RADIUS Disconnect
      Messages is supported by PacketFence starting with version 3.1.</para>
      <para>On wired network devices CoA can be used to change the security posture of a MAC and perform other
      functions like bounce a port. So far we only encountered support for CoA on the wired side on the Cisco
      hardware. For an implementation example check 
      <function>_radiusBounceMac</function>in 
      <classname>pf::SNMP::Cisco</classname>.</para>
    </sect2>
    <sect2>
      <title>Floating Network Devices Support</title>
      <para>Floating Network Devices are described in the Administration Guide under "Floating Network Devices" in
      the "Optional Components" section. Refer to this documentation if you don't know what Floating Network
      Devices are.</para>
      <para>In order to support Floating Network Devices on a switch, you need to implement the following
      methods:</para>
      <itemizedlist>
        <listitem>
          <function>setPortSecurityEnableByIfIndex($ifIndex, $enable)</function>
        </listitem>
        <listitem>
          <function>isTrunkPort($ifIndex)</function>
        </listitem>
        <listitem>
          <function>setModeTrunk($ifIndex, $enable)</function>
        </listitem>
        <listitem>
          <function>setTaggedVlans($ifIndex, $switch_locker_ref, @vlans)</function>
        </listitem>
        <listitem>
          <function>removeAllTaggedVlans($ifIndex, $switch_locker_ref)</function>
        </listitem>
      </itemizedlist>
      <para>You might need to implement the following:</para>
      <itemizedlist>
        <listitem>
        <function>enablePortConfigAsTrunk($mac, $switch_port, $switch_locker, $taggedVlans)</function>- provided by
        
        <classname>pf::SNMP</classname>core as the glue between 
        <classname>setModeTrunk()</classname>, 
        <classname>setTaggedVlans()</classname>and 
        <classname>removeAllTaggedVlans()</classname>. Override if necessary.</listitem>
        <listitem>
        <function>disablePortConfigAsTrunk($switch_port)</function>- provided by 
        <function>pf::SNMP</function>core as the glue between 
        <function>setModeTrunk()</function>, 
        <function>setTaggedVlans()</function>and 
        <function>removeAllTaggedVlans()</function>. Override if necessary.</listitem>
        <listitem>
        <function>enablePortSecurityByIfIndex($ifIndex)</function>- provided by 
        <classname>pf::SNMP</classname>core as a slim accessor to 
        <function>setPortSecurityEnableByIfIndex()</function>. Override if necessary.</listitem>
        <listitem>
        <function>disablePortSecurityByIfIndex($ifIndex)</function>- provided by 
        <classname>pf::SNMP</classname>core as a slim accessor to 
        <function>setPortSecurityEnableByIfIndex()</function>. Override if necessary.</listitem>
        <listitem>
        <function>enableIfLinkUpDownTraps($ifIndex)</function>- provided by 
        <classname>pf::SNMP</classname>core as a slim accessor to 
        <function>setIfLinkUpDownTrapEnable</function>. Override if necessary.</listitem>
        <listitem>
        <function>disableIfLinkUpDownTraps($ifIndex)</function>- provided by 
        <classname>pf::SNMP</classname>core as a slim accessor to Override if necessary.</listitem>
      </itemizedlist>
      <para>Once all the required methods are implemented, enable the capability in the switch's code with: 
      <programlisting language="perl">sub supportsFloatingDevice { return $TRUE; }</programlisting></para>
    </sect2>
  </sect1>
  <sect1>
    <title>Wireless Access-Points or Controllers</title>
    <sect2>
      <title>Minimum hardware requirements</title>
      <para>PacketFence's minimum requirements regarding Wireless hardware is:</para>
      <itemizedlist>
        <listitem>
          <para>definition of several SSID with several VLANs inside every SSID (minimum of 2 VLANs per
          SSID)</para>
        </listitem>
        <listitem>
          <para>RADIUS authentication (MAC Authentication / 802.1X)</para>
        </listitem>
        <listitem>
          <para>Dynamic VLAN assignment through RADIUS attributes</para>
        </listitem>
        <listitem>
          <para>a means to de-associate or de-authenticate a client through CLI (Telnet or SSH), SNMP, RADIUS
          Dyn-Auth 
          <footnote>
            <para>RADIUS Dynamic Authorization (RFC 3576) aka Change of Authorization (CoA) or Disconnect-Messages
            (DM aka PoD)</para>
          </footnote>or WebServices</para>
        </listitem>
      </itemizedlist>
      <para>Most of these features work out of the box for enterprise grade Access Points (AP) or Controllers.
      Where the situation starts to vary is for deauthentication support.</para>
    </sect2>
    <sect2>
      <title>De-authentication techniques</title>
      <itemizedlist>
        <listitem>
          <para>CLI (SSH or Telnet)</para>
          <para>An error prone interface and requires preparation for the SSH access or is insecure for Telnet. Not
          recommended if you can avoid it.</para>
        </listitem>
        <listitem>
          <para>SNMP</para>
          <para>SNMP de-authentication works well when available. However Vendor support is not consistent and the
          OID to use are not standard.</para>
        </listitem>
        <listitem>
          <para>RADIUS Dynamic Authorization (RFC3576)</para>
          <para>RADIUS Dynamic Authorization also known as RADIUS Change of Authorization (CoA) or RADIUS
          Disconnect Messages is supported by PacketFence starting with version 3.1. When supported it is the
          preferred technique to perform de-authentication. It is standard and requires less configuration from the
          user.</para>
          <para>An actual implementation can be found in 
          <classname>pf::SNMP::Aruba</classname>.</para>
        </listitem>
      </itemizedlist>
    </sect2>
    <sect2>
      <title>Template module</title>
      <para>Start with a copy of the template module 
      <filename>pf/lib/pf/SNMP/WirelessModuleTemplate.pm</filename>and fill in appropriate documentation and
      code.</para>
    </sect2>
    <sect2>
      <title>Required methods</title>
      <para>You need to implement at least:</para>
      <itemizedlist>
        <listitem>
          <para>
          <function>getVersion()</function>- fetch firmware version</para>
        </listitem>
        <listitem>
          <para>
          <function>parseTrap()</function>- parses the SNMP Traps sent by the hardware. For wireless hardware an
          empty method like the one in 
          <classname>pf::SNMP::WirelessModuleTemplate</classname>is ok.</para>
        </listitem>
        <listitem>
          <para>
          <function>deauthenticateMac()</function>- performs deauthentication</para>
        </listitem>
        <listitem>
          <para>
          <function>supportsWirelessMacAuth()</function>, 
          <function>supportsWirelessDot1x()</function>- based on what the hardware supports</para>
        </listitem>
      </itemizedlist>
    </sect2>
    <sect2>
      <title>Override methods</title>
      <para>If default implementation of the following methods doesn't work you will need to override them:</para>
      <itemizedlist>
        <listitem>
          <para>
          <function>extractSsid()</function>- extract SSID from RADIUS Request</para>
        </listitem>
      </itemizedlist>
    </sect2>
    <sect2>
      <title>Special case: bridged versus tunneled modes and deauthentication</title>
      <para>It is important to validate the Access-Point (AP) to Controller relationship when operating in bridged
      mode versus when operating in tunneled mode. For example, some hardware will send the RADIUS Access-Request
      from the AP when in bridged mode even though it is controlled by a controller. This behavior impacts
      deauthentication because it still needs to be performed on the controller. To support this behavior a 
      <filename>switches.conf</filename>parameter was introduced: 
      <parameter>controller_ip</parameter>.</para>
      <para>When adding a new Wireless module try to validate the bridged versus tunneled behavior and modify 
      <function>deauthenticateMac()</function>to honor 
      <parameter>controller_ip</parameter>if required.</para>
    </sect2>
  </sect1>
  <sect1>
    <title>The "adding a new network device module in PacketFence" checklist</title>
    <para>Here's a quick rundown of the several files you need to edit in order to add a new switch into
    PacketFence. There's a plan to reduce this amount of work in progress see 
    <ulink url="http://www.packetfence.org/bugs/view.php?id=1085">issue #1085</ulink>.</para>
    <itemizedlist>
      <listitem>
        <para>Tested model and firmware version should be documented in module's POD</para>
      </listitem>
      <listitem>
        <para>Any bugs and limitations should be documented in module's POD</para>
      </listitem>
      <listitem>
        <para>Add it to 
        <filename>pf/html/admin/configuration/switches_add.php</filename> and 
        <filename>switches_edit.php</filename></para>
      </listitem>
      <listitem>
        <para>Make sure that all tests pass</para>
      </listitem>
      <listitem>
        <para>Add configuration documentation to the Network Devices Guide</para>
      </listitem>
      <listitem>
        <para>Add switch to the Network Devices Guide's switch chart</para>
      </listitem>
      <listitem>
        <para>Add switch to the chart in 
        <filename>README.network-devices</filename></para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>
<chapter>
  <title>Developer recipes</title>
  <sect1>
    <title>Running development version</title>
    <sect2>
      <title>Bleeding edge</title>
      <para>For day to day development one can run a checkout of the current development branch in 
      <filename>/usr/local/pf/</filename>and develop there within a working setup.</para>
      <para>Care should be taken not to commit local configuration files changes and files not in the
      repository.</para>
    </sect2>
    <sect2>
      <title>Not so bleeding edge</title>
      <para>Using the development 
      <command>yum</command>repository and upgrade packetfence often is a good way to proceed. Check our 
      <ulink url="http://www.packetfence.org/download/snapshots.html">snapshots download page</ulink>for
      instructions.</para>
      <para>Make sure you read the 
      <filename>UPGRADE</filename>document after every upgrades to avoid any surprises.</para>
    </sect2>
  </sect1>
  <sect1>
    <title>Debugging PacketFence grammar</title>
    <para>PacketFence uses a parser to validate user input. This parser is referred to as the grammar. When you see
    errors like 
    <screen>Command not understood. (pfcmd grammar test failed at line 217.)</screen>it means that you faced a
    problem in the command you are trying to send or in the grammar itself.</para>
    <para>The parsing of a command is a tricky process. First the command is interpreted in the 
    <classname>pf::pfcmd</classname>module using traditional regular expressions. Then some of the commands will
    trigger the parser 
    <classname>pf::pfcmd::pfcmd_pregrammar</classname>which is a precompiled module that is generated from 
    <classname>pf::pfcmd::pfcmd</classname>when packetfence is built.</para>
    <para>To help troubleshoot a failing command, you can enable tracing on the parser by removing the comment from
    the following line in 
    <command>pfcmd</command>: 
    <code>#our $RD_TRACE = 1;</code></para>
  </sect1>
  <sect1>
    <title>New Exception handling techniques under testing</title>
    <para>Little attention was given to error-handling in PacketFence's early design. This is understandable as it
    wasn't probably the most bang-for-the-buck thing to do. However we must now live with a large code base that
    explodes at runtime or that doesn't differentiate an erroneous condition from a null or 0 value. Refactoring to
    improve error-handling will be gradual but new code should follow these tips:</para>
    <orderedlist>
      <listitem>
        <para>use 
        <classname>Try::Tiny</classname></para>
      </listitem>
      <listitem>
        <para>wrap stuff in 
        <code>try {...} catch {...};</code>(and optionally a 
        <code>finally {...};</code>)</para>
      </listitem>
      <listitem>
        <para>in the code use 
        <code>die(...);</code>to throw an exception and make the error message meaningful</para>
      </listitem>
      <listitem>
        <para>in the catch block, use 
        <code>$logger-&gt;logcarp(string . $_)</code>if I want output to the CLI, otherwise, choose wisely</para>
      </listitem>
    </orderedlist>
    <para>This catches a lot of errors (including runtime crashers) and allows us to recover from these
    conditions.</para>
    <para>So far, it is mandatory to wrap the Web Services enabled network devices modules' code since 
    <classname>SOAP::Lite</classname> will die on you if host is unreachable for example (actually it's 
    <classname>LWP::UserAgent</classname>who will).</para>
  </sect1>
</chapter>
<chapter>
  <title>Contributing</title>
  <para>Here are some golden rules of contributing to PacketFence:</para>
  <itemizedlist>
    <listitem>
      <para>Be active on the developer mailing list</para>
      <para>The place to be if you want to contribute to the PacketFence project is our developers mailing list: 
      <ulink url="https://lists.sourceforge.net/lists/listinfo/packetfence-devel">
      https://lists.sourceforge.net/lists/listinfo/packetfence-devel</ulink>. Let us know your issues, what you are
      working on and how you want to solve your problems. The more you collaborate the greater the chances that
      your work will be incorporated in a timely fashion.</para>
    </listitem>
    <listitem>
      <para>Use the issue tracker: 
      <ulink url="http://www.packetfence.org/bugs/">http://www.packetfence.org/bugs/</ulink></para>
      <para>Good chances that the bug you want to fix or the feature you want to implement is already filed and
      that information in the ticket will help you.</para>
    </listitem>
    <listitem>
      <para>Please provide small, focused and manageable patches</para>
      <para>If you plan on doing a lot of code, use monotone and track our current development branch. Develop the
      feature in small chunks and stay in touch with us. This way it'll be merged quickly in our codebase. No big
      code dumps after finishing your feature please.</para>
    </listitem>
  </itemizedlist>
  <sect1>
    <title>Creating patches</title>
    <para>Patches should be sent in unified diff format. This can be obtained from the 
    <command>diff</command>or 
    <command>mtn</command>tools. 
    <screen>diff -u oldfile newfile</screen>or from a checkout of the PacketFence source code from monotone: 
    <screen>mtn diff</screen></para>
    <para>If required a public branch can be created for contributors on our 
    <ulink url="http://mtn.inverse.ca/">public source code repository</ulink>.</para>
  </sect1>
  <sect1>
    <title>Translations</title>
    <para>The internationalization process uses gettext. If you are new to gettext, please consult 
    <ulink url="http://www.gnu.org/software/gettext/manual/gettext.html#Overview">
    http://www.gnu.org/software/gettext/manual/gettext.html#Overview</ulink>for a quick introduction.</para>
    <para>The PO files are stored in 
    <filename>/usr/local/pf/conf/locale</filename>. List that directory to see the languages we currently have
    translations for.</para>
    <sect2>
      <title>Online using Transifex</title>
      <para>We use the hosted service Transifex to translate 
      <ulink url="https://www.transifex.net/projects/p/packetfence/">PacketFence's PO files</ulink>. It offers the
      possibility to translate all the strings online as well as providing a command-line tool to push your
      changes. It's very convenient.</para>
      <para>To use Transifex, you must first sign up for a free account here: 
      <ulink url="https://www.transifex.net/plans/signup/free/">
      https://www.transifex.net/plans/signup/free/</ulink></para>
      <itemizedlist>
        <listitem>
          <para>Once registered, 
          <ulink url="https://www.transifex.net/projects/p/packetfence/teams">request a new team for your
          language</ulink></para>
        </listitem>
        <listitem>
          <para>Once authorized, you'll be able to start/continue translating PacketFence in your language</para>
        </listitem>
      </itemizedlist>
      <para>If you need further help about using Transifex, you might want to have 
      <ulink url="http://help.transifex.net/">a look here</ulink>.</para>
    </sect2>
    <sect2>
      <title>Using traditional method</title>
      <para>If you want to add support for a new language, please follow these steps:</para>
      <orderedlist>
        <listitem>
          <para>create a new language subdirectory in 
          <filename>/usr/local/pf/conf/locale</filename></para>
        </listitem>
        <listitem>
          <para>change into your newly created directory</para>
        </listitem>
        <listitem>
          <para>create a new subdirectory 
          <filename>LC_MESSAGES</filename></para>
        </listitem>
        <listitem>
          <para>change into your newly created directory</para>
        </listitem>
        <listitem>
          <para>copy the file 
          <filename>/usr/local/pf/conf/locale/en/LC_MESSAGES/packetfence.po</filename>into your directory</para>
        </listitem>
        <listitem>
          <para>translate the message strings in 
          <filename>packetfence.po</filename></para>
        </listitem>
        <listitem>
          <para>create the MO file by executing: 
          <screen>/usr/bin/msgfmt packetfence.po</screen></para>
        </listitem>
      </orderedlist>
      <para>Submit your new translation to the PacketFence project by contacting us at 
      <ulink url="mailto:packetfence-devel@lists.sourceforge.net?subject=new%20translation">
      packetfence-devel@lists.sourceforge.net</ulink>.</para>
    </sect2>
  </sect1>
</chapter>&additional-info; &commercial-support; &license;</book>
<!-- vim: set shiftwidth=2 tabstop=2 expandtab: -->
