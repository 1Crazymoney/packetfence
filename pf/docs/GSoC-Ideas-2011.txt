== Create a multi-platform agent that would perform client-side security verifications ==

=== Summary ===

A lot of endpoint security use cases require built-in client-side agent to perform various checks before allowing network access. Such agents often verify patch-level and the presence of an Anti-Virus on the client and reports to the NAC server. PacketFence would benefit from the availability of an open source and free modular agent.

=== Implementation ===

 1. Develop multi-platform and modular architecture for the Agent
 2. Create basic client-side tests (patch-level, registry tests, ...) 
 3. Hook with server component using Web Services
 4. Work on preventing client-side attacks (encryption, server challenge-response, anti-debugging, etc.)

=== Skills ===

Knowledge of multi-platform client-side programming. Experience with developing modular architectures (plugin-based). Security-oriented.


== Web administration interface rewrite ==

=== Summary ===

Our current Web Administration interface is done in PHP while our core is all Perl. This turned out to be a major architectural limitation. We are interested in rewriting our Web Administration interface in Perl using a modern MVC architecture and leveraging existing Perl components like Catalyst if applicable.

=== Implementation ===

 1. Establish technical requirements with mentor for new architecture
 2. Chose appropriate architecture / framework
 3. Experiment with architecture making sure that basic technical requirements are met
 4. Iteratively add features

=== Skills ===

Strong experience with Perl creating maintainable code. Experience with Web Services (SOAP::Lite). Experience with Perl Web / MVC frameworks (Catalyst). Knowledge of HTML, CSS, and JavaScript/AJAX is definitely an advantage.


== Captive Portal layout and code modernization ==

=== Summary ===

Our current Captive Portal would benefit some modernization. Highlight of the things to improve: 
 * Get rid of table based layout in favor of clean and central CSS
 * Integrate remediation pages to the captive portal (currently an external PHP script)
 * More template code re-use through Template Toolkit includes
 * Clean URLs architecture
 * Javascript field validation
 * Improved i18n
 * ...

=== Implementation ===

 1. Establish an outline of the tasks you are interested in with with mentor
 2. Iteratively implement the tasks chosen

=== Skills ===

Strong experience with Perl creating maintainable code. Experience with HTML, CSS, Apache, mod_rewrite, mod_perl, javascript, gettext.


== Initial configuration Web-based instead of through command line ==

=== Summary ===

Our configuration wizard is currently a command line tool because of a current architecture limitation. Our aim is for the student with the help of the mentor to lift that limitation and then re-implement the configuration wizard with a modern Web-based one.

=== Implementation ===

 1. Re-architect the solution to allow Apache to run even if PacketFence is not properly configured
 2. Re-think the configuration process and provide mock-ups for an improved web-based configuration process
 3. Implement that new configuration process

=== Skills ===

Strong experience with Perl creating maintainable code. Strong experience with HTML / CSS / Javascript. Strong interest in Web usability and UX. 


== nmap integration as a scanning engine ==

=== Summary ===

PacketFence currently integrates with the Nessus vulnerability scanner to verify the compliance of clients who requested network access. Nessus is no longer an open source and free tool so it cannot be bundled with PacketFence. Nmap would be a good candidate to replace Nessus thanks to its scripting engine and the availability of perl bindings.

=== Implementation ===

 1. Initial proof of concept of Nmap integration by replacing current pf::scan with a nmap-enabled one
 2. Re-architect pf::scan to allow multiple scanning back-ends
 3. Experiment with nmap configuration through PacketFence
 4. Find and/or develop interesting nmap NSE scripts for PacketFence

=== Skills ===

Strong experience with Perl creating maintainable code. Good knowledge of nmap. Familiarity with nmap NSE a plus.


== OpenVAS integration as a scanning engine ==

=== Summary ===

PacketFence currently integrates with the Nessus vulnerability scanner to verify the compliance of clients who requested network access. Nessus is no longer an open source and free tool so it cannot be bundled with PacketFence. OpenVAS would be a good candidate to replace Nessus thanks to its Nessus compatibilty.

=== Implementation ===

 1. Initial proof of concept of OpenVAS integration by replacing current pf::scan with a OpenVAS-enabled one
 2. Re-architect pf::scan to allow multiple scanning back-ends
 3. Improve error-handling and/or bidings with OpenVAS for more robust integration
 4. Find and/or develop interesting OpenVAS plugins for PacketFence

=== Skills ===

Strong experience with Perl creating maintainable code. Familiarity with OpenVAS.


== IF-MAP integration ==

=== Summary ===

IF-MAP is a protocol used to store, correlate, and retrieve identity, access control, and security posture information about users and devices on a network. We are interested in creating or integrating an IF-MAP daemon in PacketFence so that it will be able to receive messages from other network infrastructure tools and re-act on them according to a policy.

 * http://ifmapdev.com/
 * http://www.if-map.com/en.html
 * omapd - http://code.google.com/p/omapd/
 * http://www.esukom.de/

=== Implementation ===

 1. Experiment with current IF-MAP server software and library offerings
 2. Perform proof of concept integration with PacketFence where an IF-MAP message would trigger the isolation of a client device

=== Skills ===

Strong experience with Perl creating maintainable code. Experience with Web Services. Familiarity with IF-MAP a plus.


== Active - Active clustering support ==

=== Summary ===

PacketFence's high-availability use cases always relied on running it in a active-passive cluster. This usually involves lots of error-prone per-host configuration but is also a misuse of resources (one server idle all the time). Also this doesn't allow the application to vertically scale by adding more servers like an active-active setup would do.

Several problems prevent PacketFence to run in an active-active cluster mode but we would want a student to look at these problems and resolve them in creative ways and to possibly have a limited active-active proof of concept.

=== Implementation ===

 1. Install and experiment with PacketFence on a managed switch
 2. Discuss with the mentor about the current active-active problems and ideas to resolve the problems
 3. Proof of concept experiments with the potential solutions and document your findings making intrusive changes to PacketFence if necessary

=== Skills / Requirements ===

Strong experience with Perl. Experience with high-availability tools like DRBD, MySQL replication mecanisms, and multi-layer software load balancers (such as LVS, haproxy, keepalived, etc). Access to a managed switch supported by PacketFence required.

