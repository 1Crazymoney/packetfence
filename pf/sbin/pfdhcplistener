#!/usr/bin/perl 

=head1 NAME

pfdhcplistener - listen to DHCP requests

=head1 SYNOPSIS

pfdhcplistener -i <interface> [options]

 Options:
   -d     Daemonize
   -h     Help

=cut

use warnings;
use strict;
use English qw( ‐no_match_vars ) ;  # Avoids regex performance penalty
use File::Basename qw(basename);
use Getopt::Std;
use Log::Log4perl;
use Net::Pcap 0.16;
use Pod::Usage;
use POSIX qw(:signal_h);
use Try::Tiny;

use constant INSTALL_DIR => '/usr/local/pf';

use lib INSTALL_DIR . "/lib";

use pf::action;
use pf::class;
use pf::config;
use pf::db;
use pf::inline::custom $INLINE_API_LEVEL;
use pf::iplog;
use pf::iptables;
use pf::locationlog;
use pf::node;
use pf::os;
use pf::person;
use pf::rawip;
use pf::services;
use pf::trigger;
use pf::util;
use pf::util::dhcp;
use pf::violation;

Log::Log4perl->init_and_watch( INSTALL_DIR . "/conf/log.conf", $LOG4PERL_RELOAD_TIMER );
my $logger = Log::Log4perl->get_logger( basename($0) );
Log::Log4perl::MDC->put( 'proc', basename($0) );
# storing process id instead of thread id in tid (more useful)
Log::Log4perl::MDC->put( 'tid',  $PID );

POSIX::sigaction(
    &POSIX::SIGHUP,
    POSIX::SigAction->new(
        'normal_sighandler', POSIX::SigSet->new(), &POSIX::SA_NODEFER
    )
) or $logger->logdie("pfdhcplistener: could not set SIGHUP handler: $!");

POSIX::sigaction(
    &POSIX::SIGTERM,
    POSIX::SigAction->new(
        'normal_sighandler', POSIX::SigSet->new(), &POSIX::SA_NODEFER
    )
) or $logger->logdie("pfdhcplistener: could not set SIGTERM handler: $!");

POSIX::sigaction(
    &POSIX::SIGINT,
    POSIX::SigAction->new(
        'normal_sighandler', POSIX::SigSet->new(), &POSIX::SA_NODEFER
    )
) or $logger->logdie("pfdhcplistener: could not set SIGINT handler: $!");


my %args;
getopts( 'dhi:', \%args );

my $daemonize = $args{d};
my $interface = $args{i};

pod2usage( -verbose => 1 ) if ( $args{h} || !$args{i} );

my %rogue_servers;
my $is_inline_vlan;
my $accessControl;
my $interface_ip;
my $interface_vlan;

# standard signals and daemonize
daemonize() if ($daemonize);

# start dhcp monitor
if ( isenabled( $Config{'network'}{'dhcpdetector'} ) ) {
    my @devices = @listen_ints;
    push @devices, @dhcplistener_ints;
    foreach my $dev (@devices) {
        if ( $dev eq $interface ) {

            # are we listening on an inline interface ?
            if (grep( { $_->tag("int") eq $interface} @inline_enforcement_nets) != 0) {
                $logger->debug("DHCP detector on an inline interface");
                $is_inline_vlan = $TRUE;
                $accessControl = new pf::inline::custom();
            }

            $interface_ip = $Config{"interface $interface"}{'ip'};
            $interface_vlan = get_vlan_from_int($interface) || $NO_VLAN;

            $logger->info("DHCP detector on $interface enabled");
            dhcp_detector($interface);
        }
    }
    $logger->warn("pfdhcplistener for $interface finished - this is bad");
}

END {
    if ( defined($interface) ) {
        deletepid("pfdhcplistener_$interface");
        $logger->info("stopping pfdhcplistener for interface $interface");
    }
}

exit(0);

=head1 SUBROUTINES

=over

=cut
sub dhcp_detector {
    my ($eth) = @_;
    my $filter = "udp and (port 67 or port 68)";
    my $filter_t;
    my $net;
    my $mask;
    my $opt = 1;
    my $err;
    my $pcap_t = Net::Pcap::pcap_open_live( $eth, 576, 1, 0, \$err );

    if (!defined($pcap_t)) {
        $logger->logdie("Unable to initiate packet capture. Is $eth an actual network interface?");
    }

    if ((Net::Pcap::compile( $pcap_t, \$filter_t, $filter, $opt, 0 )) == -1) {
        $logger->logdie("Unable to compile filter string '$filter'");
    }

    Net::Pcap::setfilter( $pcap_t, $filter_t );
    Net::Pcap::loop( $pcap_t, -1, \&process_pkt, $eth );
}

sub process_pkt {
    my ( $user_data, $hdr, $pkt ) = @_;
    listen_dhcp( $pkt, $user_data );
}

sub listen_dhcp {
    my ( $packet, $eth ) = @_;

    my ($l2, $l3, $l4, $dhcp);

    # we need success flag here because we can't next inside try catch
    my $success;
    try {
        ($l2, $l3, $l4, $dhcp) = decompose_dhcp($packet);
        $success = 1;
    };
    if (!$success) {
        $logger->warn("Unable to parse DHCP packet: $_");
        return;
    }

    # grab frame information we care about
    my $smac = clean_mac($l2->{'src_mac'});
    my $dmac = clean_mac($l2->{'dst_mac'});

    if (!valid_mac($smac)) {
        $logger->debug("smac is invalid. skipping");
        return;
    }

    # grab IP information we care about
    my $src = $l3->{'src_ip'};
    my $dst = $l3->{'dst_ip'};

    # grab DHCP information
    my $chaddr = $dhcp->{'chaddr'};

    if ( !defined($chaddr) ) {
        $logger->debug("chaddr is undefined in DHCP packet");
        return;
    }

    $chaddr = clean_mac( substr( $chaddr, 0, 12 ) );
    if ( $chaddr ne "00:00:00:00:00:00" && !valid_mac($chaddr) ) {
        $logger->debug(
            "invalid CHADDR value ($chaddr) in DHCP packet from $smac ($src)"
        );
        return;
    }

    # There is activity from that mac, call node wakeup
    node_mac_wakeup($chaddr);

    # opcode 1 = request, opcode 2 = reply

    #           Value   Message Type
    #           -----   ------------
    #             1     DHCPDISCOVER
    #             2     DHCPOFFER
    #             3     DHCPREQUEST
    #             4     DHCPDECLINE
    #             5     DHCPACK
    #             6     DHCPNAK
    #             7     DHCPRELEASE
    #             8     DHCPINFORM

    my %options = %{$dhcp->{'options'}};
    if ( $dhcp->{'op'} == 2 ) {
        if ( defined( $options{'53'}[0] ) && $options{'53'}[0] == 2 ) {
            if ($dhcp->{'yiaddr'}) {
                $logger->info("DHCPOFFER from $src ($smac) to host $chaddr ($dhcp->{yiaddr})");
            } else {
                $logger->warn("DHCPOFFER invalid IP in DHCP's yiaddr for $chaddr");
                return;
            }

            # ignore DHCPOFFER from gateways
            # avoid rogue DHCP false positives
            if ( grep( { $_ eq $src } get_gateways() )
                || grep( { $_ eq $src }
                    split( /\s*,\s*/, $Config{'general'}{'dhcpservers'} ) ) )
            {
                $logger->debug(
                    "$src ($smac) appears to be a DHCP server or relay, adding $chaddr ($dhcp->{yiaddr}) to hash"
                );

                #update_iplog($chaddr,$dhcp->{yiaddr});
                return;
            }

            my $date = POSIX::strftime( "%m/%d/%y %H:%M:%S", localtime );
            push @{ $rogue_servers{$smac} },
                sprintf( "%s: %15s to %s on interface %s\n",
                $date, $dhcp->{'yiaddr'}, $chaddr, $eth );

            $logger->warn("$src ($smac) was detected offering $dhcp->{yiaddr} to $chaddr on $eth");
            #TODO: merge this hackish violation into standard violation management in a new violation type
            pf_run("$bin_dir/pfcmd 'violation add vid=1100010, mac=$smac'");
            if (scalar( @{ $rogue_servers{$smac} } )
                == $Config{'network'}{'rogueinterval'} )
            {
                my %rogue_message;
                $rogue_message{'subject'}
                    = "ROGUE DHCP SERVER DETECTED AT "
                    . uc($smac)
                    . " ($src) ON "
                    . uc($eth) . "\n";
                push @INC, $bin_dir;
                require pf::lookup::node;
                $rogue_message{'message'} = pf::lookup::node::lookup_node($smac) . "\n";
                $rogue_message{'message'}
                    = "Detected Offers\n---------------\n";
                while ( @{ $rogue_servers{$smac} } ) {
                    $rogue_message{'message'}
                        .= pop( @{ $rogue_servers{$smac} } );
                }
                pfmailer(%rogue_message);
            }

        } elsif ( defined( $options{'53'}[0] ) && $options{'53'}[0] == 5 ) {
            my $lease_length = $dhcp->{'options'}->{'51'};

            if ($dhcp->{'yiaddr'} !~ /^0\.0\.0\.0$/) {
                $logger->info(
                    "DHCPACK from $src ($smac) to host $chaddr ($dhcp->{yiaddr})"
                    . ( defined($lease_length) ? " for $lease_length seconds" : "" )
                );
                update_iplog( $chaddr, $dhcp->{'yiaddr'}, $lease_length );
                return;
            } elsif ($dhcp->{'ciaddr'} !~ /^0\.0\.0\.0$/) {
                $logger->info(
                    "DHCPACK CIADDR from $src ($smac) to host $chaddr ($dhcp->{ciaddr})"
                    . ( defined($lease_length) ? " for $lease_length seconds" : "")
                );
                update_iplog( $chaddr, $dhcp->{'ciaddr'}, $lease_length );
                return;
            } else {
                $logger->warn(
                    "invalid DHCPACK from $src ($smac) to host $chaddr [$dhcp->{yiaddr} - $dhcp->{ciaddr}]"
                );
                return;
            }
        }
    } elsif ( $dhcp->{'op'} == 1 ) {
        if ( defined( $options{'53'}[0] ) && $options{'53'}[0] == 1 ) {
            $logger->debug("DHCPDISCOVER from $chaddr");

        } elsif ( defined( $options{'53'}[0] ) && $options{'53'}[0] == 3 ) {
            $logger->debug("DHCPREQUEST from $chaddr");
            my $lease_length = $dhcp->{'options'}->{'51'};
            my $client_ip = $dhcp->{'options'}->{'50'};
            if (defined($client_ip) && $client_ip !~ /^0\.0\.0\.0$/) {
                $logger->info(
                    "DHCPREQUEST from $chaddr ($client_ip)"
                    . ( defined($lease_length) ? " with lease of $lease_length seconds" : "")
                );
                update_iplog( $chaddr, $client_ip, $lease_length );
            }
            if ($is_inline_vlan) {
                locationlog_synchronize($interface_ip, $NO_PORT, $interface_vlan, $chaddr, $NO_VOIP, $INLINE);
                $accessControl->performInlineEnforcement($chaddr);
            }

        } elsif ( defined( $options{'53'}[0] ) && $options{'53'}[0] == 7 ) {
            $logger->debug("DHCPRELEASE from $chaddr ($dhcp->{ciaddr})");
            iplog_close($dhcp->{'ciaddr'});
            return;
        } elsif ( defined( $options{'53'}[0] ) && $options{'53'}[0] == 8 ) {
            $logger->debug("DHCPINFORM from $chaddr ($dhcp->{ciaddr})");
            return;
        }

        my %tmp;
        $tmp{'dhcp_fingerprint'} = "";
        if ( defined( $options{'55'} ) ) {
            $tmp{'dhcp_fingerprint'} = join( ",", @{ $options{'55'} } );
        }

        # TODO why rely on mysql_date, we should use time instead
        $tmp{'last_dhcp'} = mysql_date();
        $tmp{'computername'} = join( "", @{ $options{'12'} } )
            if ( defined( $options{'12'} ) );

        if ( isenabled( $Config{'network'}{'dhcpoption82logger'} )
            && defined( $options{'82'} ) )
        {
            my ($switch, $vlan, $mod, $port);
            my %option_82;
            while ( @{ $options{'82'} } ) {
                my $subopt = shift( @{ $options{'82'} } );

                # this makes offset assumptions we probably shouldn't, but it should work fine for Cisco
                # assume all cidtype/ridtype always == 0
                shift( @{ $options{'82'} } );
                shift( @{ $options{'82'} } );
                my $len = shift( @{ $options{'82'} } );
                while ($len) {
                    my $val = shift( @{ $options{'82'} } );
                    push( @{ $option_82{$subopt} }, $val );
                    $len--;
                }
            }

            if ( defined( $option_82{'1'} ) ) {
                ($vlan, $mod, $port) = unpack( 'nCC', pack( "C*", @{ $option_82{'1'} } ) );
            }
            if ( defined( $option_82{'2'} ) ) {
                $tmp{'switch'} = clean_mac( join( ":", unpack( "H*", pack( "C*", @{ $option_82{'2'} } ) ) ) ); 
            }

            # TODO port should be translated into ifIndex
            locationlog_insert_closed($switch, $mod . '/' . $port, $vlan, $chaddr, '');
        }

        if ( !node_exist($chaddr) ) {
            $logger->info("UPDATE New node $chaddr");
            node_add_simple($chaddr);
        }

        # updating the node first 
        # in case the fingerprint generates a violation and that autoreg uses fingerprint to auto-categorize nodes 
        # see #1216 for details
        my $result = node_modify( $chaddr, %tmp );
        my $fingerprint_data = process_fingerprint($chaddr, $tmp{'dhcp_fingerprint'});

        my $modified_node_log_message = '';
        foreach my $node_key ( keys %tmp ) {
            $modified_node_log_message .= "$node_key = " . $tmp{$node_key} . ",";
        }
        chop($modified_node_log_message);

        $logger->info("$chaddr requested an IP. "
            . ( defined($fingerprint_data) ? "DHCP Fingerprint: $fingerprint_data. " : "Unknown DHCP fingerprint." )
            . "Modified node with $modified_node_log_message"
        );

        foreach my $field (keys %tmp) {
            print "$field: $tmp{$field}\n";
        }
    } else {
        $logger->debug("unrecognized DHCP opcode from $chaddr: $dhcp->{op}");
    }
}

sub update_iplog {
    my ( $srcmac, $srcip, $lease_length ) = @_;
    $logger->debug("$srcip && $srcmac");

    # return if MAC or IP is not valid
    if ( !valid_mac($srcmac) || !valid_ip($srcip) ) {
        $logger->error("invalid MAC or IP: $srcmac $srcip");
        return;
    }

    my $oldmac = ip2mac($srcip);
    my $oldip  = mac2ip($srcmac);

    if ( $oldmac && $oldmac ne $srcmac ) {
        $logger->info(
            "oldmac ($oldmac) and newmac ($srcmac) are different for $srcip - closing iplog entry"
        );
        iplog_close_now($srcip);
    }
    if ( $oldip && $oldip ne $srcip ) {
        $logger->info(
            "oldip ($oldip) and newip ($srcip) are different for $srcmac - closing iplog entry"
        );
        iplog_close_now($oldip);
    }
    if ( !node_exist($srcmac) ) {
        $logger->info("UPDATE New node $srcmac ($srcip)");
        node_add_simple($srcmac);
    }
    iplog_open( $srcmac, $srcip, $lease_length );
}

=item process_fingerprint

=over

=item Calls violation_trigger for every matching DHCP fingerprint type and class. 

=item Logs unknown fingerprints

=item Returns a string that identifies OS id and name

=back

=cut
sub process_fingerprint {
    my ($chaddr, $dhcp_fingerprint) = @_;

    return if (!defined($dhcp_fingerprint) || $dhcp_fingerprint eq "");

    my $fingerprint_data;
    my @fingerprint_info = dhcp_fingerprint_view($dhcp_fingerprint);
    if ( scalar(@fingerprint_info) && ( ref( $fingerprint_info[0] ) eq 'HASH' ) ) {

        # precise fingerprint
        $fingerprint_data = "OS::".$fingerprint_info[0]->{'id'}." (".$fingerprint_info[0]->{'os'}.")";
        $logger->debug("$chaddr sending $fingerprint_data trigger");
        violation_trigger( $chaddr, $fingerprint_info[0]->{'id'}, "OS" );

        # class fingerprints
        foreach my $class_trigger (@fingerprint_info) {
            $logger->debug("$chaddr sending OS::".$class_trigger->{'classid'}." (".$class_trigger->{'class'}.") trigger");
            violation_trigger( $chaddr, $class_trigger->{'classid'}, "OS" );
        }

    } else {
        $logger->info("unknown DHCP fingerprint: $dhcp_fingerprint");
    }

    return $fingerprint_data;
}

sub daemonize {
    chdir '/' or $logger->logdie("Can't chdir to /: $!");
    open STDIN, '<', '/dev/null'
        or $logger->logdie("Can't read /dev/null: $!");
    my $log_file = "$install_dir/logs/pfdhcplistener_$interface";
    open STDOUT, '>>', "$log_file"
        or $logger->logdie("Can't write to $log_file: $!");

    defined( my $pid = fork )
        or $logger->logdie("pfdhcplistener: could not fork: $!");
    POSIX::_exit(0) if ($pid);
    if ( !POSIX::setsid() ) {
        $logger->error("could not start a new session: $!");
    }
    open STDERR, '>&STDOUT' or $logger->logdie("Can't dup stdout: $!");
    my $daemon_pid = createpid("pfdhcplistener_$interface");

    # updating Log4perl's pid info
    Log::Log4perl::MDC->put( 'tid',  $daemon_pid );
}

sub normal_sighandler {
    deletepid("pfdhcplistener_$interface");
    if ( threads->self->tid() == 0 ) {
        $logger->logdie(
            "pfdhcplistener: caught SIG" . $_[0] . " - terminating" );
    }
}

=back

=head1 BUGS AND LIMITATIONS

Probably

=head1 AUTHOR

Dave Laporte <dave@laportestyle.org>

Kevin Amorin <kev@amorin.org>

Dominik Gehl <dgehl@inverse.ca>

Olivier Bilodeau <obilodeau@inverse.ca>

=head1 COPYRIGHT

Copyright (C) 2005 Dave Laporte

Copyright (C) 2005 Kevin Amorin

Copyright (C) 2007-2011 Inverse inc.

=head1 LICENSE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
USA.

=cut

