# iptables template
# This file is manipulated on PacketFence's startup before being given to iptables
*filter

### INPUT ###
:INPUT DROP [0:0]
# accept loopback stuff
-A INPUT --in-interface lo --jump ACCEPT
# accept anything related
-A INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
# Accept Ping (easier troubleshooting)
-A INPUT --protocol icmp --icmp-type echo-request --jump ACCEPT

:input-management-if - [0:0]
# SSH
-A input-management-if --match state --state NEW --match tcp --protocol tcp --dport 22 --jump ACCEPT
# Web Admin
-A input-management-if --protocol tcp --match tcp --dport %%web_admin_port%% --jump ACCEPT
# RADIUS
-A input-management-if --protocol tcp --match tcp --dport 1812 --jump ACCEPT
-A input-management-if --protocol udp --match udp --dport 1812 --jump ACCEPT
-A input-management-if --protocol tcp --match tcp --dport 1813 --jump ACCEPT
-A input-management-if --protocol udp --match udp --dport 1813 --jump ACCEPT
# SNMP Traps
-A input-management-if --protocol udp --match udp --dport 162  --jump ACCEPT

:input-internal-vlan-if - [0:0]
# DNS
-A input-internal-vlan-if --protocol udp --match udp --dport 53  --jump ACCEPT
# DHCP
-A input-internal-vlan-if --protocol udp --match udp --dport 67  --jump ACCEPT
-A input-internal-vlan-if --protocol tcp --match tcp --dport 67  --jump ACCEPT
# HTTP (captive-portal) 
-A input-internal-vlan-if --protocol tcp --match tcp --dport 80  --jump ACCEPT
-A input-internal-vlan-if --protocol tcp --match tcp --dport 443 --jump ACCEPT

:input-internal-inline-if - [0:0]
# DHCP
-A input-internal-inline-if --protocol udp --match udp --dport 67  --jump ACCEPT
-A input-internal-inline-if --protocol tcp --match tcp --dport 67  --jump ACCEPT
# HTTP (captive-portal) 
-A input-internal-inline-if --protocol tcp --match tcp --dport 80  --jump ACCEPT
-A input-internal-inline-if --protocol tcp --match tcp --dport 443 --jump ACCEPT

:input-highavailability-if - [0:0]
#SSH
-A input-highavailability-if --match state --state NEW --match tcp --protocol tcp --dport 22 --jump ACCEPT
# Corosync
-A input-highavailability-if --protocol udp --match udp --dport 5405 --jump ACCEPT
-A input-highavailability-if --protocol udp --match udp --dport 5407 --jump ACCEPT
#DRBD
-A input-highavailability-if --protocol tcp --match tcp --dport 7788 --jump ACCEPT

### FORWARD ###
:FORWARD DROP [0:0]
:forward-internal-inline-if - [0:0]
# DNS
%%filter_forward_inline%%
# Allow NAT back in
-A FORWARD --in-interface %%mgmt_interface%% --match state --state ESTABLISHED,RELATED --jump ACCEPT

:OUTPUT ACCEPT [0:0]

# These will redirect to the proper chains based on conf/pf.conf's configuration
%%filter_if_src_to_chain%%
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:prerouting-internal-inline-if - [0:0]
%%mangle_prerouting_inline%%
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# These will redirect to the proper chains based on conf/pf.conf's configuration
%%mangle_if_src_to_chain%%
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:prerouting-internal-inline-if - [0:0]
%%nat_prerouting_inline%%
:POSTROUTING ACCEPT [0:0]
# NAT out (doing PAT actually)
-A POSTROUTING --out-interface %%mgmt_interface%% --jump MASQUERADE
:OUTPUT ACCEPT [0:0]
# These will redirect to the proper chains based on conf/pf.conf's configuration
%%nat_if_src_to_chain%%
COMMIT
