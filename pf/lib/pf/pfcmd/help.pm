#
# Copyright 2005 David LaPorte <david@davidlaporte.org>
# Copyright 2005 Kevin Amorin <kev@amorin.org>
# Copyright 2008 Inverse groupe conseil <dgehl@inverse.ca>
#
# See the enclosed file COPYING for license information (GPL).
# If you did not receive this file, see
# http://www.fsf.org/licensing/licenses/gpl.html.
#

use strict;
use warnings;

sub help_control {
  print STDERR << "EOT";
Usage: pfcmd control <service> [start|stop|restart]

stop/stop/restart specified service

  httpd            | apache
  pf               | manage all PF services
  pfdetect         | PF snort alert parser
  pfdhcplistener   | PF DHCP monitoring daemon
  pfmon            | PF ARP monitoring daemon
  pfredirect       | bogus POP3/SMTP servers
  pfsetvlan        | PF VLAN isolation daemon
  snmptrapd        | SNMP trap receiver daemon
  snort            | if stopped or restarted, pfredirect must also be restarted
EOT
  exit;
}

sub help_service {
  print STDERR << "EOT";
Usage: pfcmd service <service>

return PID of specified PF daemon or 0 if not running

  httpd            | apache
  pf               | all services
  pfdetect         | PF snort alert parser
  pfdhcplistener   | PF DHCP monitoring daemon
  pfmon            | PF ARP monitoring daemon
  pfredirect       | bogus POP3/SMTP servers
  pfsetvlan        | PF VLAN isolation daemon
  snmptrapd        | SNMP trap receiver daemon
  snort            | if stopped or restarted, pfredirect must also be restarted
EOT
  exit;
}

sub help_node {
  print STDERR << "EOT";
Usage: pfcmd node <add|view|edit|delete> mac [assignments]

manipulate node entries

examples:
  pfcmd node view all   
  pfcmd node add 00:01:02:03:04:05 status="reg",pid=1
  pfcmd node delete 00:01:02:03:04:05 
EOT
  exit;
}

sub help_person {
  print STDERR << "EOT";
Usage: pfcmd person <add|view|edit|delete> pid [assignments]

manipulate person entries

examples:
  pfcmd person view all
  pfcmd person add bjenkins notes="Bob Jenkins"
  pfcmd person delete bjenkins
EOT
  exit;
}

sub help_violation {
  print STDERR << "EOT";
Usage: pfcmd violation <view|edit|delete> id [assignments]
             violation add [assignments]

manipulate violation entries. the id is DIFFERENT from vid.  The ID is just 
a unique identifier for this specific violation, not the ID contained in violation.conf

examples:
  pfcmd violation view all
  pfcmd violation add vid=1200003,mac=00:01:02:03:04:05
  pfcmd violation delete 4
EOT
  exit;
}

sub help_schedule {
  print STDERR << "EOT";
Usage: pfcmd schedule <view|add|edit|delete> [number|ip-range|ipaddress/cidr] [assignments]

use nessus to scan ip(s).  IP address can be specified as IP, Start-EndIP, IP/xx Cidr format.

examples:
  pfcmd schedule view all
  pfcmd schedule view 1
  pfcmd schedule now 128.11.23.2/24 tid=11808;11835;11890;12209
  pfcmd schedule add 128.11.23.7/24 tid=all,date="0 3 * * *"
  pfcmd schedule add 128.11.23.2/24 tid=11808;11835;11890;12209,date="0 3 * * *"
  pfcmd schedule delete 2
EOT
}

sub help_locationhistoryswitch {
  print STDERR << "EOT";
Usage: pfcmd locationhistoryswitch switch ifIndex [date]
        
get the MAC connected to a specified switch port with optional date (in mysql format)

examples:
  pfcmd locationhistoryswitch 192.168.0.1 10
  pfcmd locationhistoryswitch 192.168.0.1 6 2006-10-12 15:00:00
EOT
}

sub help_locationhistorymac {
  print STDERR << "EOT";
Usage: pfcmd locationhistorymac mac [date]
        
get the switch port where a specified MAC connected to with optional date (in mysql format)

examples:
  pfcmd locationhistorymac 00:11:22:33:44:55
  pfcmd locationhistorymac 00:11:22:33:44:55 2006-10-12 15:00:00
EOT
}

sub help_ifoctetshistoryswitch {
  print STDERR << "EOT";
Usage: pfcmd ifoctetshistoryswitch switch ifIndex
        
get the bytes throughput through a specified switch port with optional date

examples:
  pfcmd ifoctetshistoryswitch 192.168.0.1 10
  pfcmd ifoctetshistoryswitch 192.168.0.1 10 start_time=2007-10-12 10:00:00,end_time=2007-10-13 10:00:00
EOT
}

sub help_ifoctetshistorymac {
  print STDERR << "EOT";
Usage: pfcmd ifoctetshistorymac mac
        
get the bytes throughput generated by a specified MAC with optional date

examples:
  pfcmd ifoctetshistorymac 00:11:22:33:44:55
  pfcmd ifoctetshistorymac 00:11:22:33:44:55 start_time=2007-10-12 10:00:00,end_time=2007-10-13 10:00:00

EOT
}

sub help_ifoctetshistoryuser {
  print STDERR << "EOT";
Usage: pfcmd ifoctetshistoryuser pid
        
get the bytes throughput generated by a specified user with optional date

examples:
  pfcmd ifoctetshistoryuser testUser
  pfcmd ifoctetshistoryuser testUser start_time=2007-10-12 10:00:00,end_time=2007-10-13 10:00:00

EOT
}

sub help_ipmachistory {
  print STDERR << "EOT";
Usage: pfcmd ipmachistory <ip|mac> [start_date=<date>,end_time=<date>]
        
get the MAC/IP mapping for a specified IP or MAC with optional date (in mysql format)

examples:
  pfcmd ipmachistory 192.168.1.100
  pfcmd ipmachistory 192.168.1.100 start_time=2006-10-12 15:00:00,end_time=2006-10-18 12:00:00
EOT
}

sub help_history {
  print STDERR << "EOT";
Usage: pfcmd history <ip|mac> [date]
        
get the MAC/IP mapping for a specified IP or MAC with optional date (in mysql format)

examples:
  pfcmd history 192.168.1.100
  pfcmd history 192.168.1.100 2006-10-12 15:00:00
EOT
}

sub help_report {
  print STDERR << "EOT";
Usage: pfcmd report <active|inactive> | <registered|unregistered|os|osclass|unknownprints|openviolations|statics> [all|active]

display canned reports - "active" modifier shows only nodes with open iplog entries

active         | show all nodes with open iplog entries
inactive       | show all nodes without an open iplog entry
registered     | show all registered nodes
unregistered   | show all unregistered nodes
os             | show OS distribution
osclass        | show OS distribution, aggregated by class
unknownprints  | show DHCP fingerprints without a known OS mapping
openviolations | show all open violations
statics        | show probable static IPs
EOT
}

sub help_graph {
  print STDERR << "EOT";
Usage: pfcmd graph <registered|unregistered|violations|nodes> [day|month|year]
    or
       pfcmd graph ifoctetshistoryswitch <switch> <ifIndex> start_time=<time>,end_time=<time>
       pfcmd graph ifoctetshistorymac <MAC> start_time=<time>,end_time=<time>
       pfcmd graph ifoctetshistoryuser <pid> start_time=<time>,end_time=<time>

provide data form graphs aggregated my day, month, or year

registered            | historical registered node data
unregistered          | historical unregistered node data
violations            | historical open violation data
nodes                 | dual series graph of registered vs unregistered
ifoctetshistoryswitch | history of traffic usage for a given switchport
ifoctetshistorymac    | history of traffic usage for a given MAC
ifoctetshistoryuser   | history of traffic usage for a given user
EOT
}

sub help_config {
  print STDERR << "EOT";
Usage: pfcmd config <get|set|help> option[=value]

get, set, or display help on pf.conf configuration values

examples:
  pfcmd config get general.hostname
  pfcmd config set general.hostname=new_hostname
  pfcmd config help general.hostname
EOT
}

sub help_ui {
  print STDERR << "EOT";
Usage: pfcmd ui menus
                dashboard <recent_violations|recent_violations_opened|current_grace|recent_violations_closed|recent_registrations> <interval>

provide UI menu details and bite-size dashboard/rss information "nuggets"

ui menus                 | provide menu details to web UI
recent_violations        | show recent violation activity in <interval> hours (up to 10 records) 
recent_violations_opened | show recent violation opens in <interval> hours (up to 10 records)
recent_violations_closed | show recent violation closes in <interval> hours (up to 10 records)
recent_registrations     | show recent registrations in <interval> hours (up to 10 records)
current_grace            | show nodes (up to 10) currently in "grace"
current_activity         | show active vs inactive nodes
current_node_status      | show registered vs unregistered active nodes
EOT
}

sub help_class {
  print STDERR << "EOT";
Usage: pfcmd class view <vid>

view violation classification - to edit, use violations.conf and "pfcmd reload violations"
EOT
}

sub help_trigger {
  print STDERR << "EOT";
Usage: pfcmd trigger view <id> [scan|detect]

view the Snort IDs, OS IDs,  and Nessus plugins associated with violations.  To edit, modify violations.conf and execute "pfcmd reload violations" 

examples:
	pfcmd trigger view all
	pfcmd trigger view 12
	pfcmd trigger view all scan
EOT
}

sub help_update {
  print STDERR << "EOT";
Usage: pfcmd update <fingerprints|oui>

download canonical fingerprint or OUI data

fingerprints | update dhcp_fingerprints.conf from packetfence.org
oui          | update OUI prefixes from IEEE
EOT
}

sub help_reload {
  print STDERR << "EOT";
Usage: pfcmd reload <fingerprints|violations>

reload fingerprints or violations database tables without restart
EOT
}

sub help_version {
  print STDERR << "EOT";
Usage: pfcmd version 

get installed PF version and database MD5s
EOT
}

sub help_fingerprint {
  print STDERR << "EOT";
Usage: pfcmd fingerprint view <all|id>

show DHCP Fingerprints stored in database

examples:
  pfcmd fingerprint view all
  pfcmd fingerprint view 1,6,15,44,3,33
EOT
}

sub help_switchlocation {
  print STDERR << "EOT";
Usage: pfcmd switchlocation view <ip> <ifIndex>

show switchlocation information stored in database

examples:
  pfcmd switchlocation view 192.168.70.1 3
EOT
}

sub help_lookup {
  print STDERR << "EOT";
Usage: pfcmd lookup <person|node> value

call bin/lookup_person.pl or bin/lookup_node.pl with the passed value
EOT
}

1
