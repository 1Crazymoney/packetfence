Microsoft PKI (MSPKI) Quick Installation Guide
==============================================
:encoding: UTF-8
:lang: en
:doctype: book

include::includes/global-attributes.asciidoc[]

About this Guide
----------------

This guide has been created to give a quick start to configure the Microsoft PKI with PacketFence 5.4+. This guide does not include advanced troubleshooting of EAP-TLS connections. Refer to the relevant documentation of EAP-TLS, RADIUS and OpenSSL for advanced features.

Assumptions
-----------

* You have at least one server with PacketFence 5.4 or later.
* The server already has a properly configured switch with 802.1X support.
* The PacketFence RADIUS server is working in your environment.
* You have an Active Directory server or another Microsoft Windows 2008 R2 server installed.
* The PacketFence management IP will be 192.168.1.5.
* The RADIUS shared secret is "useStrongerSecret".

Installation
------------

Step 1: Install Active Directory Certificate Service (ADCS)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: This will cover the configuration for Active Directory Certificate Services (ADCS) on Microsoft Windows 2008 R2 Entreprise. This configuration has been tested to be integreted with PacketFence. The installation of ADCS is not cover by this guide see the Microsoft white paper about it for more information (http://social.technet.microsoft.com/wiki/contents/articles/9063.network-device-enrollment-service-ndes-in-active-directory-certificate-services-ad-cs.aspx).

For the integration with PacketFence the following subroles need to be installed in ADCS:

* Certification Authorithy Web Enrollment
* Network Device Enrollment Service
* Online Responder

Before start the configuration, a hotfix is necessary to install, due to a Microsft issue, after restarting the service ADCS, the server cannot enroll new certificate with the error message: "The RPC Server is unavailable". The hotfix is available here: https://support.microsoft.com/en-us/kb/2633200

Communication between MSPKI and PacketFence will be using port 80 with this configuration.

Configuring Network Device Enrollement Service (NDES)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Our main activity in the deployment of ADCS is to configure Network Enrollement Device Service (NDES) which will allow us to exchange certificate with the MS PKI server via the protocol Simple Certificate Exchange Protocol (SCEP).

Every configuration change has to be done by an account with administrative privileges.

To allow the use of NDES as a Pki-Provider in BOYD deployement there is multiple changes.

Challenge Password
^^^^^^^^^^^^^^^^^^

MSCEP include by default a challenge password, which is unique and dynamically generated for each device which want to enroll on the system. The issue here while using the challenge password is that it is necessary for an administrator to connect to the NDES server from the user's device. This a barrier to BOYD deployement for instance, where you want the user to be able to register himself his device. Since we use NDES with PacketFence, our security to obtain a certificate would be the credentials necessary to access the enrollement system.

To disable the challenge password you need to modifiy the following key in the Windows registry. 

Click `Start` and enter `regedit`.

Navigate to `Computer` > `HKEY_LOCAL_MACHINE` > `SOFTWARE` > `Microsoft` > `Cryptography` > `MSCEP` > `EnforcePassword`.

Change the value of `EnforcePassword` to `0` (default is `1`).

Extend URL length for the request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Best practices from Cisco recommand to extend the URL length to avoid issue with longer request. 

To do so, enter the following command in the CLI on the NDES server:

 %systemroot%\system32\inetsrv\appcmd.exe set config /section:system.webServer/
 security/requestFiltering /requestLimits.maxQueryString:"16384" /commit:apphost

Certificate template
^^^^^^^^^^^^^^^^^^^^

NOTE: Remember that the validity of your CA can impact your whole certificate architecture.

The settings to change need to be access via `Server Manager` > `Roles` > `Active Directory Certificates Services` > `Certificate templates`.

The main goal is to deliver certificate for `user Authentication`, this mean we have to setup a specific template.

First, the certificate template need at least the following `Enhanced Key Usage` and `Key Usage`:

image::docs/images/scep-ms-pki-en-key-usage.png[scaledwidth="100%",alt="Mandatory Enhanced Key Usage"]

image::docs/images/scep-ms-pki-key-usage.png[scaledwidth="100%",alt="Mandatory Key Usage"]

Since we will duplicate a template, those `Key Usage`, and `Enhanced Key Usage` are already configured. We advise to duplicate the template `User` and change the necessary settings.

Once duplicated, right click your new template, go to `Properties`. Navigate to the tab `Subject Name`. Make sure to select `Supplied in the request` over `Built from information in Active Directory`, else the requested CN will be overwritten by NDES.

To allow NDES to use this template you need to navigate to `Server Manager` > `Roles` > `Active Directory Certificates Services` > expand `YourServerName`, right click `Certificate template` and chose `New template to issue`, in the list select your newly created template.

Now that you chose your template to deliver you need to configure it in the registry.

For the registry, press `Start` and type `regedit` in the search bar.

While in the registry navigate to `Computer` > `HKEY_LOCAL_MACHINE` > `SOFTWARE` > `Microsoft` > `Cryptography` > `MSCEP`.

Here you should have a list of three keys entries: 

* EncryptionTemplate, 
* GeneralPurposeTemplate,
* SignatureTemplate.

Replace each value with our newly created template. The default value should be `IPSECIntermediateOffline`.

You now need to reboot the NDES server to apply changes to the registry.

IIS configuration
^^^^^^^^^^^^^^^^^

The use of SCEP with PacketFence also require a change in the IIS configuration.

Navigate to `Server Manager` > `Web(IIS)` > expand `Default web site` > select `CertSrv` > `mscep`. Select `Authentication`, and double click `Anonymous Authentication`. Make sure that `Application pool identity` is selected.

Online Certificate Status Protocol (OCSP)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For the configuration of OCSP, there are small changes to apply.

First we need to add the allow the use of the template "OCSPResponseSigning" by the server, to do so navigate to `Server Manager` > `Roles` > `Active Directory Certificates Services` > expand `YourServerName`, right click `Certificate template` and chose `New template to issue`, in the list select your newly created template.

After the installation of OCSP we need to create a "Revocation Configuration".

To create the "Revocation Configuration" navigate to `Server Manager` > `Roles` > `Active Directory Certificate Services` and expand `OnlineResponder`. Then expand `YourServerName`, right click on "Revocation Configuration", select `Add Revocation Configuration`, click `Next`, chose a name for your configuration and click `Next`. 

Chose `Select a certificate for an existing entreprise CA`, click `Next`. Click `Browse` and find your entreprise CA in the list, select it, click `OK` and then `Next`. Chose `Automatically select a signing certificate`, make sure `Auto-Enroll for an OCSP signing certificate` is selected, then chose the default template of OCSP which is `OCSPResponseSigning` in the drop down list next to `Certificate Template:`. You need to add providers only if you whish to use some CRL in addition to OCSP.

Once created, right click the revocation configuration and select `Edit properties`, go to the tab `Signing`, here you need to select `Enable NONCE extension support` then click `OK`.

Verify that your OCSP is in the settings of the CA. Right click your CA, chose `Properties`. Navigate to the tab `Extension`, in the drop down list `Select extension` chose `Authority Information Access (AIA)`. Make sure that you have the following in the list of locations: `http://<fqdn of ndes server>/ocsp`, if you do not have it, add it via the button `Add...`. In this menu type the "http://" then insert "<ServerDNSName>" and type "/ocsp", the line you add should look like the following: `http://<ServerDNSName>/ocsp`, then validate by clicking OK. Also verify that `Include in the online certificate status protocol(OCSP) extension` is selected.

RADIUS Certificate generation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Using the PKI of Microsft include that all your certificates will be deliver by the root CA of the PKI. The public key of this certificate is necessary on PacketFence. 

As for RADIUS authentication we will need to generate a certificate for FreeRADIUS in PacketFence.

The template `WebServer` match most of what we need for the creation of the RADIUS certificate.

Duplicate the template `WebServer` and change the following settings inside the template, in the tab `Request Handling` select `Allow private key to be exported`.

For the RADIUS server certificate we also advice to change the validity of it's template. We advise to use a longer time here e.g. 10years.

Allow this template to be used by adding to the `Certifcate template` as we did for the `User` template.

Once our template is ready we will make the certificate signing request (CSR) from PacketFence and submit it to the NDES server.

To do so we need a private key on PacketFence to sign the CSR, in your CLI type the following:

 # openssl genrsa -out ~/fqdn.server.key 2048

Then we will generate the CSR:

 # openssl req -new -sha256 -key ~/fqdn.server.key -out ~/fqdn.server.csr

You will be prompt for some information, here is an example of a valid configuration.

* CN=packetfence.local
* C=CA
* ST=QC
* Locality=Montreal
* Organization=Inverse
* Organization Unit=IT

No fields are mandatory else than the CN.

Once you have your CSR we will submit it to the NDES server.

Display the content of the .csr file and open a web browser, reach the following:

 http://<fqdn of the NDES server>/CertSrv/

You can now submit a request. Click `Request a certificate`, select `advanced certificate request`. Paste the content of your CSR file and select the template `Web Server`. Click `Submit`. On this page select `Base 64 encoded` and click `Download certificate`. 

This will give you the certificate(public key) for FreeRADIUS, you have the private key from the openssl genrsa command and now we need to download the CA.

To do so use the website where we were ealier; 

 http://<fqdn of the NDES server>/CertSrv/

Click `Download a CA certificate, certificate chain or CRL`, select your CA certificate in the list, select `Base 64` as the encoding method and finaly click `Download CA certificate`.

Copy those files from the location you downloaded them to PacketFence.

Step 2: Configuring PacketFence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Certificate storage on PacketFence
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
It is recommended to create a separate directory to separate EAP-TLS certificates from server certificates:

 # mkdir /usr/local/pf/conf/ssl/tls_certs/

RADIUS EAP-TLS authentication requires three files, the CA certificate, the server certificate and the private key.

Copy those files in your newly created folder:

* Privatekey of the RADIUS server (~/fqdn.server.key)
* Certificate for RADIUS (obtained from the CSR submitted)
* Certificate CA (downloaded from NDES website)

Ensure that the files are readable by "pf": 

 # chown pf:pf /usr/local/pf/conf/ssl/tls_certs/*
 
RADIUS EAP-TLS and MSPKI
^^^^^^^^^^^^^^^^^^^^^^^^

Using the PKI generated certificates requires editing the radius EAP configuration file.

Edit the /usr/local/pf/conf/radiusd/eap.conf file and replace the following lines with references to your new certificates in the 'tls' configuration block:

 private_key_file = %%install_dir%%/conf/ssl/server.key
 certificate_file = %%install_dir%%/conf/ssl/server.pem

E.g.

 private_key_file = %%install_dir%%/conf/ssl/tls_certs/YourCert.key
 certificate_file = %%install_dir%%/conf/ssl/tls_certs/YourCert.pem
 CA_file = %%install_dir%%/conf/ssl/tls_certs/MyCA.pem

Certificate revocation checks also have to be configured using OCSP in the same block.

For example: 

    ocsp {
        enable = yes
        override_cert_url = yes
        url = "http://<fqdn of the ndes server>/ocsp"
    }

Restart radiusd to regenerate the new configuration files and enable EAP-TLS using your CA signed certificates:

 # /usr/local/pf/bin/pfcmd service radiusd restart

PacketFence provider configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Using the PKI requires configuring the PKI providers section in the PacketFence GUI under Configuration > Users. The provider configuration defines how PacketFence connects to the MS PKI and what information will be send.

Add a new PKI provider and select MS PKI.

Fill out the form for a PKI provider according to your Certificate of Authority configuration.

image::docs/images/scep-ms-pki-provider.png[scaledwidth="100%",alt="MSPKI configuration"]

For the url it will be http://<fqdn of the server>/CertSrv/mscep if you use our configuration.

image::docs/images/scep-ms-pki-provider2.png[scaledwidth="100%",alt="MSPKI configuration"]

The "server certificate path" and "CA cert path" both need to be absolute (e.g. /usr/local/pf/conf/ssl/tls_certs/MyCA.pem is an absolute path).

The "Common name attribute" field defines how the certificate will be generated and what type of "ownership" will associate the certificate to the connection.
If you select 'MAC address', a certificate will be generated for the device itself using the MAC address as the identifier.
If you select 'Username', a certificate will be generated for the user using his login name on the authentication backend (e.g. Active-Directory).

This means that revoking the certificate for a username based certificate will block all the devices that this user registered.
If you generate the certificates using the MAC address, revoking a certificate will block only that device.

Provisioners configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^

Provisioners allow devices to automatically configure themselves to connect to the proper SSID (if applicable), use the proper authentication method (e.g. EAP-TLS) and trust the CA certificate and any certificate signed by it.

Provisioners are configured in the PacketFence administration GUI under Configuration > Users > Provisioners.

Add a new provisioner for each of the classes of devices to be supported amongst Android, Apple Devices and Windows.
Fill out the form, choosing a different Provisioning Id per provisioner.

The fields affect the provisioning behavior in the following fashion:

* Roles: The "Roles" field defines which devices will be affected by the provisioning item. If empty all devices for this class will be affected.
* SSID: The "SSID" field defines which SSID will be configured on the device using the authentication profile.
* EAP-Type: The EAP type defines the authentication method supported and should be set to EAP-TLS to integrate with the PacketFence PKI.
* Security type: The security type should be set to WPA2 to integrate with the PacketFence PKI.
* PKI Provider: This should match the provider you configured earlier in the section on providers.

The following is an example on how to configure an EAP-TLS connection for Windows/Android/OS X/iOS

image::docs/images/scep-ms-pki-eaptls-example.png[scaledwidth="100%",alt="Provisioner EAP-TLS configuration"]

OS X/iOS require signing the provisioning profile with a Certification Authority already trusted by the device such as e.g. VeriSign.
Configuring this has to be done in the 'Signing' tab in the "Apple devices". 

image::docs/images/packetfence-pki-eaptls-sign-example.png[scaledwidth="100%",alt="Signing provisioner"]

Fill out the fields with the contents of the Base64 encoded certificates.
To extract this information from a pem formatted certificate, copy the file content included between the begin and end tag, not including the delimiters themselves.
For instance if the file content is:

----
----- BEGIN CERTIFICATE -----
1234567890asdfghjkl
zxcvbnmqwertyuiop78
----- END CERTIFICATE -----
----

Copy everything between the BEGIN and END lines, but not the lines themselves.
Repeat this operation for the certificate key and intermediate certificate if any.

----
----- BEGIN PRIVATE KEY -----
1234567890asdfghjkl
zxcvbnmqwertyuiop78
----- END PRIVATE KEY -----
----


Portal Profiles Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Provisioners have to be enabled on the Portal Profiles configuration in the PacketFence GUI.

Under Configuration > Main > Portal Profiles, select each of the provisioners created above which should be active for the profile.
If no portal profile is defined, configure the "default" profile to use the provisioners created.

NOTE: If you use two different portal profiles for the open and secure networks, make sure you configure the provisioners on both profiles.


Passthroughs required for Android
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Android devices require passthroughs to be created to allow them to fetch the configuration application from the Play Store.

Add the following to the "Trapping" section of the Configuration tab in the PacketFence GUI.

----
passthrough=enabled
passthroughs=*.ggpht.com,*.googleusercontent.com,android.clients.google.com,
  *.googleapis.com,*.android.clients.google.com,*.gvt1.com
----

Debugging MSPKI integration with PacketFence
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This a way to do the procedure of enrollment manually, mainly use for debugging purpose.

First you need to generate a request and its private key via mkrequest. Go in the folder were sscep is installed, it should be /usr/local/scep

 cd /usr/local/scep

And launch the command to generate the request

 ./mkrequest -email user@example.com

This will create 2 files in your current directory, local.csr and local.key.

Now you need to obtain the CA and some specific certificates from the PKI.

 sscep getca -u http://<ServerDNSName>/CertSrv/mscep/ -c path/File-to-create

Now you need to use the "CEP encryption" certificate and the "Enrollment agent" one. Both were obtained when doing the getca. You can open certificates you just download to verifiy which one is which. X in the next command is the number of the file, you should have at least three certificate with the same name and a different number at the end. e.g. MyFile-0, MyFile-1 etc..

To display the content of a certificate use the following: 

 openssl x509 -in path/file-created-X -text

In the display look out for `X509v3 extensions:`, for the scep enroll we will use the "CEP Enryption" as an arugment for -e and the "Enrollement agent" as an argument for -c. -d is use for the debug output. -l is the local file where your certificate will be save.
 
 sscep enroll -c path/Enrollment-Agent-Certificate -e path/CEP-Encryption-Certificate -k path/local.key -r path/local.csr -l path/MyCert.crt -S sha1 -u http://<ServerDNSName>/CertSrv/mscep/ -d 

To verify your certificate against the OCSP you can use the following openssl command:

 openssl ocsp -issuer path/CA-Certificate -cert path/Certificate-to-verify -text -url http://<ServerDNSName>/ocsp
