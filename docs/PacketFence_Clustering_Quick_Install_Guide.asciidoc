Clustering Quick Installation Guide
===================================
:encoding: UTF-8
:lang: en
:doctype: book

include::includes/global-attributes.asciidoc[]

About this Guide
----------------
This guide has been created to give a quick start to install active/active clustering in PacketFence 5+. This guide does not include advanced troubleshooting of the active/active clustering. Refer to the documentation of HAProxy and Keepalive for advanced features.

Assumptions
-----------
* You have at least two servers with a fresh install of PacketFence 5+
* Both servers are identical copies for the network interfaces
* Both servers have access to the same layer 2 network on all their network interfaces

Installation
------------
Step 1: Install MariaDB Galera cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you're migrating from a previous PacketFence infrastructure, you will need to export your database now and reimport it at the end of the process.
See the annex for the procedure. This part assumes you are are starting this on a fresh server.

Configure the MariaDB repo 
^^^^^^^^^^^^^^^^^^^^^^^^^^

On CentOS add in : /etc/yum.repos.d/mariadb.repo

----
[mariadb]
name=mariadb
baseurl=http://mariadb.mirror.iweb.com/mariadb-5.5.42/yum/centos6-amd64/
gpgcheck=0
enabled=1
----

Now install the MariaDB Galera cluster package

----
# rpm --nodeps -ev mysql-server
# yum install MariaDB-Galera-server
----

Configuring MariaDB Galera Cluster
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Configure the cluster in /etc/my.cnf.d/cluster.cnf

----
[mysqld]
query_cache_size=0
binlog_format=ROW
default-storage-engine=innodb
innodb_autoinc_lock_mode=2
query_cache_type=0

# Galera Provider Configuration
wsrep_provider=/usr/lib64/galera/libgalera_smm.so

# Galera Cluster Configuration
wsrep_cluster_name="---NAME OF CLUSTER---"
wsrep_cluster_address="gcomm://---CSV LIST OF IPS---"

# Galera Synchronization Congifuration
wsrep_sst_method=rsync

# Galera Node Configuration
wsrep_node_address="---THIS NODE MGMT IP---"
wsrep_node_name="---THIS NODE UNIQUE NAME---"
----

Where
^^^^^
* 'wsrep_cluster_name' is the friendly name of your cluster
* 'wsrep_cluster_address' is the IP addresses of the management interfaces of your cluster delimited by commas. Should give : 'gcomm://192.168.1.5,192.168.1.6'
* 'wsrep_node_address' is the management IP address of this server
* 'wsrep_node_name' is the unique name of the server in the cluster. We suggest you put the hostname.

Configure MySQL in my.cnf. Adjust these to your needs

----
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
user=mysql
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
innodb_file_per_table
max_connections=500
innodb_buffer_pool_size=500M
innodb_additional_mem_pool_size=20M
key_buffer_size=100M
innodb_flush_log_at_trx_commit=2
table_cache=300
query_cache_size=256M
thread_cache_size=10
innodb_log_file_size = 48M
bind_address=127.0.0.1

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
----

If it's the first server to join the MariaDB cluster

----
# service mysql start --wsrep-new-cluster
----

If this is a new server in an existing cluster, do.

----
# service mysql start
----

NOTE: When adding a server in an existing cluster, do not forget to add it to the list of wsrep_cluster_address parameter in cluster.cnf on the existing nodes.

If the server is alone but was already created with --wsrep-new-cluster, use this command to have start in standalone mode

----
service mysql start --wsrep_cluster_address=gcomm://
----

You should now have two MariaDB database servers connected in cluster. 

Testing the database cluster
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Connect to the database server using the command line client on one of the servers and create a new database.

----
# mysql -u root -e 'create database test_replication'
----

Now go on your other server and verify that the database has been created there too.

----
# mysql -u root -e 'show databases'
----

If the database has been properly replicated, you can now start PacketFence on one of the servers and do the initial configuration in the Configurator.

See instructions below to connect a slave server after the database join has been made.

Step 2 : Server configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will need to configure the server so the services can bind on IP addresses they don't currently have configured. This allows faster failover of the services.

On CentOS, add the following line in /etc/sysctl.conf and then reload with 'sysctl -p'

----
net.ipv4.ip_nonlocal_bind = 1
----

Create the pem that combines the key and certificate for the http services. Adapt to your own paths if you are using different certificates.

----
# cd /usr/local/pf/conf/ssl
# cat server.key server.crt > server.pem
----

Step 3 : Create a new cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to create a new cluster, the only thing needed is to configure cluster.conf

You will need to configure it with your server hostname. To get it use : *hostname* in a command line.

In the case of this example it will be 'packetfence.local'. 

The 'CLUSTER' section represents the virtual IP addresses of your cluster that will be shared by your servers.

In this example, eth0 is the management interface, eth1.2 is the registration interface and eth1.3 is the isolation interface.

Create a configuration similar to this : 

----

[CLUSTER]
management_ip=192.168.1.10

[CLUSTER interface eth0]
ip=192.168.1.10
type=management

[CLUSTER interface eth1.2]
ip=192.168.2.10
type=internal

[CLUSTER interface eth1.3]
ip=192.168.3.10
type=internal

----
----

[packetfence.local]
management_ip=192.168.1.5

[packetfence.local interface eth0]
ip=192.168.1.5
type=management
mask=255.255.255.0

[packetfence.local interface eth1.2]
enforcement=vlan
ip=192.168.2.5
type=internal
mask=255.255.255.0

[packetfence.local interface eth1.3]
enforcement=vlan
ip=192.168.3.5
type=internal
mask=255.255.255.0

----

Once this configuration is done, restart PacketFence to have it applied. 
If done properly this should start two additionnal services : haproxy and keepalived

You should now have service on the IP addresses defined in the 'CLUSTER' sections


Step 4 : Connect a slave packetfence server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First, connect the server to the MariaDB cluster using the instructions above

Go through the configurator to setup the interfaces and then stop

Get the webservices user and password on the master node in 'Configuration/Web Services'
If there's none, set the user, password and then restart httpd.webservices

Do (and make sure it does it without any errors) :

----
# /usr/local/pf/bin/cluster/sync --from=192.168.1.5 --api-user=packet --api-password=fence
----

Where : 
^^^^^^^
* '192.168.1.5' is the management IP of the other PacketFence node
* 'packet' is the webservices username on the master node
* 'fence' is the webservices password on the master node

Edit cluster.conf and create the server's configuration using the other node as an example.

Reload the configuation and start the webservices on the new server

----
# bin/pfcmd configreload
# bin/pfcmd service httpd.webservices restart
----

Make sure that this server is binding to it's own management address. If it's not, verify the cluster.conf management interface configuration.

----
# netstat -nlp | grep 9090
----

Now replicate this server configuration to the other nodes in the cluster

----
# bin/cluster/sync --as-master
----

Make sure at least cluster.conf was replicated to the other servers

Now restart packetfence on each cluster server keeping the new node as the last one to be restarted.

Removing a server from the cluster
----------------------------------

NOTE: Removing a server from the cluster requires a restart of the PacketFence service on all nodes.

First, you will need to stop PacketFence on your server and put it offline.

----
# service packetfence stop
# shutdown -h 0
----

Then you need to remove all the configuration associated to the server from cluster.conf on one of the remaining nodes. 
Configuration for a server is always prefixed by the server's hostname.

Once you have removed the configuration, you need to reload it and synchronize it with the remaining nodes in the cluster.

----
# /usr/local/pf/bin/pfcmd configreload hard
# /usr/local/pf/bin/cluster/sync --as-master
----

Now restart PacketFence on all the servers so that the removed node is not part of the clustering configuration.

Lost of connectivity between all servers
----------------------------------------

NOTE: When there are connectivity issues between a two nodes of the cluster, we highly suggest you leave only one of the nodes online and reconnect the other ones afterwards.

The database engine will stop responding if it is not able to replicate to at least one of the other servers. In a two node cluster this means that loss of connectivity between servers will stop all database access.

In order to have one of the servers work in standalone mode, issue the following command.

----
# mysql -u root -e "set global wsrep_cluster_address='gcomm://'"
----

CAUTION: It is important that you only execute this on one of the nodes.

In the case the connectivity is lost between one or more nodes of the cluster, some steps are required once they regain connectivity to reelect a master.
Once the other servers have regain connectivity, they will automatically reconnect to this node and synchronize their data.

Resynchronizing the configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to be sure the configuration is properly synched on all nodes, you will need to enter this command on the previously selected master node.

----
# /usr/local/pf/bin/cluster/sync --as-master
----


Recovering from a complete shutdown/reboot of all nodes
-------------------------------------------------------

In the event that all nodes restart, the MariaDB cluster will refuse to start and wait for the election of a new master node.

First, you will need to decide which node you want to elect as the one with the master set of data. 

If you did configure a server to run in standalone mode before the shutdown, then elect it as a master.

----
# service mysql start --wsrep_cluster_address=gcomm://
----

Now once it starts, start the database engine as you would normally on the other nodes.


Using a two nodes cluster
-------------------------

Using a two nodes cluster is not recommended since failure on one of the nodes will stop all database access on the other node in order to protect the data integrity.

This means all PacketFence services will stop working since they cannot access the database.

To workaround this, you can configure MariaDB to continue working even if it loses connectivity with the other node. 

This means that a temporary network problem between both nodes will make both servers the master database node and create a database split brain that needs to be manually fixed.

----
mysqld_safe --wsrep-recover
----



Annex 1 : Migrating to MariaDB from an existing infrastructure
--------------------------------------------------------------

In the event that you are migrating from an existing Infrastructure, you will need to export your database before upgrading to MariaDB in order to reimport it once you have setup MariaDB.

CAUTION: This is an advanced procedure. Advanced technical knowledge is highly suggested before you continue this procedure.

Exporting the data
~~~~~~~~~~~~~~~~~~

First we will dump your current PacketFence database to an SQL text file.

----
# mysqldump -u DBUSER -pDBPASSWORD DBNAME > packetfence.sql
----

Where
^^^^^
* 'DBUSER' is the username to connect to your database (available in pf.conf, 'pf' by default)
* 'DBPASSWORD' is the password to connect to your database (available in pf.conf, 'packet' by default)
* 'DBNAME' is the database name (available in pf.conf, 'pf' by default)

Make sure you stop MySQL and then move it's data directory to do a backup.

----
On CentOS
# service mysqld stop

On Debian/Ubuntu
# service mysql stop

# mkdir /root/mysql-backup
# mv -frp /var/lib/mysql/* /root/mysql-backup
----

You can now follow the instructions described in 'Step 1' and continue once you have your 2 servers with database connectivity.

Reimporting data
~~~~~~~~~~~~~~~~

Now that you have a new database server, you can import the data in your SQL file.

NOTE: This step may be extremely long depending on the size of your database.

----

# mysql -u root -e 'create database pf'
# mysql -u root pf < packetfence.sql

----

Once this step has been done, you will need to grant the proper rights to the PacketFence user on the database by using :

----
# mysql -u root -e "GRANT SELECT,INSERT,UPDATE,DELETE,EXECUTE,LOCK TABLES ON pf.* TO 'pf'@'localhost' IDENTIFIED BY packet"
# mysql -u root -e "GRANT SELECT,INSERT,UPDATE,DELETE,EXECUTE,LOCK TABLES ON pf.* TO 'pf'@'%' IDENTIFIED BY packet"
# mysql -u root -e "FLUSH PRIVILEGES"
----

Make sure you configure the password at the end to something else than 'packet'.

Now, configure this database account in /usr/local/pf/conf/pf.conf and /usr/local/pf/conf/pfconfig.conf. Leave them unchanged if you configured the same credentials as they were in MySQL.


