# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require YAML module
require 'yaml'
 
# Read YAML file with box details
inventory = YAML.load_file('inventory/hosts')

Vagrant.configure("2") do |pfservers|

  ## Global settings for pfservers
  # disable synced folders
  pfservers.vm.synced_folder ".", "/vagrant", disabled: true
  
  # use same private key on all machines
  pfservers.ssh.insert_key = false
  
  # disable default rule
  pfservers.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh", disabled: true

  # provisionners
  # Sync timezone with host
  pfservers.vm.provision "shell", inline: "sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/#{inventory['all']['vars']['tz']} /etc/localtime", run: "always"

  # Allow SSH as root with insecure_private_key
  pfservers.vm.provision "ssh", type:"shell", inline: "sudo mkdir -p /root/.ssh && sudo cp /home/vagrant/.ssh/authorized_keys /root/.ssh/"

  # Provision with ansible
  pfservers.vm.provision "ansible" do |ansible|
    ansible.playbook = "site.yml"
    ansible.config_file = "ansible.cfg"
    ansible.inventory_path = "inventory"
    ansible.galaxy_role_file = "requirements.yml"
    # only for debug
    #ansible.verbose = "-v"
  end

  # Use to run only tasks tagged "install" in site.yml
  pfservers.vm.provision "config", type:"ansible", run:"never" do |config|
    config.playbook = "site.yml"
    config.config_file = "ansible.cfg"
    config.inventory_path = "inventory"
    config.tags = "install"
    # only for debug
    #ansible.verbose = "-v"
  end

  pfservers.vm.provision "api_config", type:"ansible", run:"never" do |config|
    config.playbook = "site.yml"
    config.config_file = "ansible.cfg"
    config.inventory_path = "inventory"
    config.tags = "install"
    config.start_at_task = "include api_config tasks"
    # only for debug
    #ansible.verbose = "-v"
  end

  # loop on host(s) in 'stable' group in inventory to create VM(s)
  inventory['all']['children']['pfservers']['children'].each do |groups, hosts|
    hosts['hosts'].each do |server, details|
      # don't start automatically virtual machines
      pfservers.vm.define server, autostart: false do |srv|
        srv.vm.box = details['box']
        srv.vm.hostname = server

        # set new rule for webadmin
        srv.vm.network "forwarded_port", guest: 1443, host: details['admin_port'], host_ip: "127.0.0.1", auto_correct: true

        # set new rule for ssh
        srv.vm.network "forwarded_port", guest: 22, host: details['ssh_port'], host_ip: "127.0.0.1", auto_correct: true

        # mgmt
        # libvirt__forward_mode: "route" mean:
        # Allow inbound, but only to our expected subnet. Allow outbound, but
        # only from our expected subnet. Allow traffic between guests. Deny
        # all other inbound. Deny all other outbound.
        srv.vm.network "private_network", ip: details['mgmt_ip'], libvirt__dhcp_enabled: false, libvirt__forward_mode: "route"

        # registration
        # libvirt__forward_mode: "none" mean:
        # Allow traffic between guests. Deny inbound. Deny outbound.
        srv.vm.network "private_network", ip: details['reg_ip'], libvirt__dhcp_enabled: false, libvirt__forward_mode: "none"

        # isolation
        srv.vm.network "private_network", ip: details['iso_ip'], libvirt__dhcp_enabled: false, libvirt__forward_mode: "none"

        srv.vm.provider "libvirt" do |v|
          v.random_hostname = true
          v.cpus = details['cpus']
          v.memory = details['memory']
        end
      
        srv.vm.provider "virtualbox" do |v|
          v.cpus = details['cpus']
          v.memory = details['memory']
        end
      end
    end
  end
  inventory['all']['children']['pfservers']['children']['dev']['hosts'].each do |server,details|
    pfservers.vm.define server do |srv|
      # provisioner for dev machines
      srv.vm.provision "setup-dev-env", type: "shell", path: "../dev-helpers/setup-dev-env.sh"
    end
  end
end
